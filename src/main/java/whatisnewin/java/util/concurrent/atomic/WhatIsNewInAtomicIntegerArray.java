package whatisnewin.java.util.concurrent.atomic;

import java.util.concurrent.atomic.AtomicIntegerArray;

/**
 * This source file was generated by WhatIsNewInJava<br>
 *
 * This class provides an example call to each method in class {@link AtomicIntegerArray}
 * that were newly introduced in Java versions 9, 10, 11.<br>
 *
 * {@link AtomicIntegerArray} is an old class but has new fields, constructors or methods
 * @since 1.5
 * @see AtomicIntegerArray
 */
public final class WhatIsNewInAtomicIntegerArray
{
  /**
   * Example call to new method {@link AtomicIntegerArray#setOpaque}
   * @since 9
   * @see AtomicIntegerArray#setOpaque
   */
  public void setOpaque(int i, int newValue)
  {
    AtomicIntegerArray testee = $$$();

    testee.setOpaque(i, newValue);
  }

  /**
   * Example call to new method {@link AtomicIntegerArray#weakCompareAndSetVolatile}
   * @since 9
   * @see AtomicIntegerArray#weakCompareAndSetVolatile
   */
  public boolean weakCompareAndSetVolatile(int i, int expectedValue, int newValue)
  {
    AtomicIntegerArray testee = $$$();

    boolean result = testee.weakCompareAndSetVolatile(i, expectedValue, newValue);
    return result;
  }

  /**
   * Example call to new method {@link AtomicIntegerArray#getPlain}
   * @since 9
   * @see AtomicIntegerArray#getPlain
   */
  public int getPlain(int i)
  {
    AtomicIntegerArray testee = $$$();

    int result = testee.getPlain(i);
    return result;
  }

  /**
   * Example call to new method {@link AtomicIntegerArray#getOpaque}
   * @since 9
   * @see AtomicIntegerArray#getOpaque
   */
  public int getOpaque(int i)
  {
    AtomicIntegerArray testee = $$$();

    int result = testee.getOpaque(i);
    return result;
  }

  /**
   * Example call to new method {@link AtomicIntegerArray#compareAndExchangeRelease}
   * @since 9
   * @see AtomicIntegerArray#compareAndExchangeRelease
   */
  public int compareAndExchangeRelease(int i, int expectedValue, int newValue)
  {
    AtomicIntegerArray testee = $$$();

    int result = testee.compareAndExchangeRelease(i, expectedValue, newValue);
    return result;
  }

  /**
   * Example call to new method {@link AtomicIntegerArray#getAcquire}
   * @since 9
   * @see AtomicIntegerArray#getAcquire
   */
  public int getAcquire(int i)
  {
    AtomicIntegerArray testee = $$$();

    int result = testee.getAcquire(i);
    return result;
  }

  /**
   * Example call to new method {@link AtomicIntegerArray#weakCompareAndSetAcquire}
   * @since 9
   * @see AtomicIntegerArray#weakCompareAndSetAcquire
   */
  public boolean weakCompareAndSetAcquire(int i, int expectedValue, int newValue)
  {
    AtomicIntegerArray testee = $$$();

    boolean result = testee.weakCompareAndSetAcquire(i, expectedValue, newValue);
    return result;
  }

  /**
   * Example call to new method {@link AtomicIntegerArray#setRelease}
   * @since 9
   * @see AtomicIntegerArray#setRelease
   */
  public void setRelease(int i, int newValue)
  {
    AtomicIntegerArray testee = $$$();

    testee.setRelease(i, newValue);
  }

  /**
   * Example call to new method {@link AtomicIntegerArray#compareAndExchangeAcquire}
   * @since 9
   * @see AtomicIntegerArray#compareAndExchangeAcquire
   */
  public int compareAndExchangeAcquire(int i, int expectedValue, int newValue)
  {
    AtomicIntegerArray testee = $$$();

    int result = testee.compareAndExchangeAcquire(i, expectedValue, newValue);
    return result;
  }

  /**
   * Example call to new method {@link AtomicIntegerArray#compareAndExchange}
   * @since 9
   * @see AtomicIntegerArray#compareAndExchange
   */
  public int compareAndExchange(int i, int expectedValue, int newValue)
  {
    AtomicIntegerArray testee = $$$();

    int result = testee.compareAndExchange(i, expectedValue, newValue);
    return result;
  }

  /**
   * Example call to new method {@link AtomicIntegerArray#setPlain}
   * @since 9
   * @see AtomicIntegerArray#setPlain
   */
  public void setPlain(int i, int newValue)
  {
    AtomicIntegerArray testee = $$$();

    testee.setPlain(i, newValue);
  }

  /**
   * Example call to new method {@link AtomicIntegerArray#weakCompareAndSetPlain}
   * @since 9
   * @see AtomicIntegerArray#weakCompareAndSetPlain
   */
  public boolean weakCompareAndSetPlain(int i, int expectedValue, int newValue)
  {
    AtomicIntegerArray testee = $$$();

    boolean result = testee.weakCompareAndSetPlain(i, expectedValue, newValue);
    return result;
  }

  private AtomicIntegerArray $$$()
  {
    return null;
  }
}
