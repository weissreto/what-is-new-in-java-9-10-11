package whatisnewin.java.util.concurrent.atomic;

import java.util.concurrent.atomic.AtomicInteger;

/**
 * This source file was generated by WhatIsNewInJava.<br>
 *
 * This class provides an example call to each method in class {@link AtomicInteger}
 * that were newly introduced in Java versions 9, 10, 11.<br>
 *
 * {@link AtomicInteger} is an old class but has new fields, constructors or methods.
 * @since 1.5
 * @see AtomicInteger
 */
public final class WhatIsNewInAtomicInteger
{
  /**
   * Example call to new method {@link AtomicInteger#compareAndExchangeAcquire(int, int)}.
   * @since 9
   * @see AtomicInteger#compareAndExchangeAcquire(int, int)
   */
  public int compareAndExchangeAcquire(int expectedValue, int newValue)
  {
    AtomicInteger testee = $$$();

    int result = testee.compareAndExchangeAcquire(expectedValue, newValue);
    return result;
  }

  /**
   * Example call to new method {@link AtomicInteger#compareAndExchange(int, int)}.
   * @since 9
   * @see AtomicInteger#compareAndExchange(int, int)
   */
  public int compareAndExchange(int expectedValue, int newValue)
  {
    AtomicInteger testee = $$$();

    int result = testee.compareAndExchange(expectedValue, newValue);
    return result;
  }

  /**
   * Example call to new method {@link AtomicInteger#setPlain(int)}.
   * @since 9
   * @see AtomicInteger#setPlain(int)
   */
  public void setPlain(int newValue)
  {
    AtomicInteger testee = $$$();

    testee.setPlain(newValue);
  }

  /**
   * Example call to new method {@link AtomicInteger#weakCompareAndSetPlain(int, int)}.
   * @since 9
   * @see AtomicInteger#weakCompareAndSetPlain(int, int)
   */
  public boolean weakCompareAndSetPlain(int expectedValue, int newValue)
  {
    AtomicInteger testee = $$$();

    boolean result = testee.weakCompareAndSetPlain(expectedValue, newValue);
    return result;
  }

  /**
   * Example call to new method {@link AtomicInteger#setOpaque(int)}.
   * @since 9
   * @see AtomicInteger#setOpaque(int)
   */
  public void setOpaque(int newValue)
  {
    AtomicInteger testee = $$$();

    testee.setOpaque(newValue);
  }

  /**
   * Example call to new method {@link AtomicInteger#weakCompareAndSetVolatile(int, int)}.
   * @since 9
   * @see AtomicInteger#weakCompareAndSetVolatile(int, int)
   */
  public boolean weakCompareAndSetVolatile(int expectedValue, int newValue)
  {
    AtomicInteger testee = $$$();

    boolean result = testee.weakCompareAndSetVolatile(expectedValue, newValue);
    return result;
  }

  /**
   * Example call to new method {@link AtomicInteger#getPlain()}.
   * @since 9
   * @see AtomicInteger#getPlain()
   */
  public int getPlain()
  {
    AtomicInteger testee = $$$();

    int result = testee.getPlain();
    return result;
  }

  /**
   * Example call to new method {@link AtomicInteger#getOpaque()}.
   * @since 9
   * @see AtomicInteger#getOpaque()
   */
  public int getOpaque()
  {
    AtomicInteger testee = $$$();

    int result = testee.getOpaque();
    return result;
  }

  /**
   * Example call to new method {@link AtomicInteger#compareAndExchangeRelease(int, int)}.
   * @since 9
   * @see AtomicInteger#compareAndExchangeRelease(int, int)
   */
  public int compareAndExchangeRelease(int expectedValue, int newValue)
  {
    AtomicInteger testee = $$$();

    int result = testee.compareAndExchangeRelease(expectedValue, newValue);
    return result;
  }

  /**
   * Example call to new method {@link AtomicInteger#getAcquire()}.
   * @since 9
   * @see AtomicInteger#getAcquire()
   */
  public int getAcquire()
  {
    AtomicInteger testee = $$$();

    int result = testee.getAcquire();
    return result;
  }

  /**
   * Example call to new method {@link AtomicInteger#weakCompareAndSetAcquire(int, int)}.
   * @since 9
   * @see AtomicInteger#weakCompareAndSetAcquire(int, int)
   */
  public boolean weakCompareAndSetAcquire(int expectedValue, int newValue)
  {
    AtomicInteger testee = $$$();

    boolean result = testee.weakCompareAndSetAcquire(expectedValue, newValue);
    return result;
  }

  /**
   * Example call to new method {@link AtomicInteger#setRelease(int)}.
   * @since 9
   * @see AtomicInteger#setRelease(int)
   */
  public void setRelease(int newValue)
  {
    AtomicInteger testee = $$$();

    testee.setRelease(newValue);
  }

  private AtomicInteger $$$()
  {
    return null;
  }
}
