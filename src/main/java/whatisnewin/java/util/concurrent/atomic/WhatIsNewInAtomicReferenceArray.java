package whatisnewin.java.util.concurrent.atomic;

import java.util.concurrent.atomic.AtomicReferenceArray;

/**
 * This source file was generated by WhatIsNewInJava<br>
 *
 * This class provides an example call to each method in class {@link AtomicReferenceArray}
 * that were newly introduced in Java versions 9, 10, 11.<br>
 *
 * {@link AtomicReferenceArray} is an old class but has new fields, constructors or methods
 * @since 1.5
 * @see AtomicReferenceArray
 */
public final class WhatIsNewInAtomicReferenceArray<E>
{
  /**
   * Example call to new method {@link AtomicReferenceArray#weakCompareAndSetVolatile}
   * @since 9
   * @see AtomicReferenceArray#weakCompareAndSetVolatile
   */
  public boolean weakCompareAndSetVolatile(int i, E expectedValue, E newValue)
  {
    AtomicReferenceArray<E> testee = $$$();

    boolean result = testee.weakCompareAndSetVolatile(i, expectedValue, newValue);
    return result;
  }

  /**
   * Example call to new method {@link AtomicReferenceArray#getPlain}
   * @since 9
   * @see AtomicReferenceArray#getPlain
   */
  public E getPlain(int i)
  {
    AtomicReferenceArray<E> testee = $$$();

    E result = testee.getPlain(i);
    return result;
  }

  /**
   * Example call to new method {@link AtomicReferenceArray#getOpaque}
   * @since 9
   * @see AtomicReferenceArray#getOpaque
   */
  public E getOpaque(int i)
  {
    AtomicReferenceArray<E> testee = $$$();

    E result = testee.getOpaque(i);
    return result;
  }

  /**
   * Example call to new method {@link AtomicReferenceArray#compareAndExchangeRelease}
   * @since 9
   * @see AtomicReferenceArray#compareAndExchangeRelease
   */
  public E compareAndExchangeRelease(int i, E expectedValue, E newValue)
  {
    AtomicReferenceArray<E> testee = $$$();

    E result = testee.compareAndExchangeRelease(i, expectedValue, newValue);
    return result;
  }

  /**
   * Example call to new method {@link AtomicReferenceArray#setOpaque}
   * @since 9
   * @see AtomicReferenceArray#setOpaque
   */
  public void setOpaque(int i, E newValue)
  {
    AtomicReferenceArray<E> testee = $$$();

    testee.setOpaque(i, newValue);
  }

  /**
   * Example call to new method {@link AtomicReferenceArray#weakCompareAndSetAcquire}
   * @since 9
   * @see AtomicReferenceArray#weakCompareAndSetAcquire
   */
  public boolean weakCompareAndSetAcquire(int i, E expectedValue, E newValue)
  {
    AtomicReferenceArray<E> testee = $$$();

    boolean result = testee.weakCompareAndSetAcquire(i, expectedValue, newValue);
    return result;
  }

  /**
   * Example call to new method {@link AtomicReferenceArray#setRelease}
   * @since 9
   * @see AtomicReferenceArray#setRelease
   */
  public void setRelease(int i, E newValue)
  {
    AtomicReferenceArray<E> testee = $$$();

    testee.setRelease(i, newValue);
  }

  /**
   * Example call to new method {@link AtomicReferenceArray#getAcquire}
   * @since 9
   * @see AtomicReferenceArray#getAcquire
   */
  public E getAcquire(int i)
  {
    AtomicReferenceArray<E> testee = $$$();

    E result = testee.getAcquire(i);
    return result;
  }

  /**
   * Example call to new method {@link AtomicReferenceArray#compareAndExchangeAcquire}
   * @since 9
   * @see AtomicReferenceArray#compareAndExchangeAcquire
   */
  public E compareAndExchangeAcquire(int i, E expectedValue, E newValue)
  {
    AtomicReferenceArray<E> testee = $$$();

    E result = testee.compareAndExchangeAcquire(i, expectedValue, newValue);
    return result;
  }

  /**
   * Example call to new method {@link AtomicReferenceArray#compareAndExchange}
   * @since 9
   * @see AtomicReferenceArray#compareAndExchange
   */
  public E compareAndExchange(int i, E expectedValue, E newValue)
  {
    AtomicReferenceArray<E> testee = $$$();

    E result = testee.compareAndExchange(i, expectedValue, newValue);
    return result;
  }

  /**
   * Example call to new method {@link AtomicReferenceArray#weakCompareAndSetPlain}
   * @since 9
   * @see AtomicReferenceArray#weakCompareAndSetPlain
   */
  public boolean weakCompareAndSetPlain(int i, E expectedValue, E newValue)
  {
    AtomicReferenceArray<E> testee = $$$();

    boolean result = testee.weakCompareAndSetPlain(i, expectedValue, newValue);
    return result;
  }

  /**
   * Example call to new method {@link AtomicReferenceArray#setPlain}
   * @since 9
   * @see AtomicReferenceArray#setPlain
   */
  public void setPlain(int i, E newValue)
  {
    AtomicReferenceArray<E> testee = $$$();

    testee.setPlain(i, newValue);
  }

  private AtomicReferenceArray $$$()
  {
    return null;
  }
}
