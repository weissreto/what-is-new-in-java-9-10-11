package whatisnewin.java.util;

import java.util.Map;
import java.util.Map.Entry;

/**
 * This source file was generated by WhatIsNewInJava.<br>
 *
 * This class provides an example call to each method in class {@link Map}
 * that were newly introduced in Java versions 9, 10, 11.<br>
 *
 * {@link Map} is an old class but has new fields, constructors or methods.
 * @since 1.2
 * @see Map
 */
public final class WhatIsNewInMap<K, V>
{
  /**
   * Example call to new method {@link Map#of()}.
   * @since 9
   * @see Map#of()
   */
  public static <K, V> Map<K, V> of()
  {
    Map<K, V> result = Map.of();
    return result;
  }

  /**
   * Example call to new method {@link Map#of(Object, Object)}.
   * @since 9
   * @see Map#of(Object, Object)
   */
  public static <K, V> Map<K, V> of(K k1, V v1)
  {
    Map<K, V> result = Map.of(k1, v1);
    return result;
  }

  /**
   * Example call to new method {@link Map#of(Object, Object, Object, Object)}.
   * @since 9
   * @see Map#of(Object, Object, Object, Object)
   */
  public static <K, V> Map<K, V> of(K k1, V v1, K k2, V v2)
  {
    Map<K, V> result = Map.of(k1, v1, k2, v2);
    return result;
  }

  /**
   * Example call to new method {@link Map#of(Object, Object, Object, Object, Object, Object)}.
   * @since 9
   * @see Map#of(Object, Object, Object, Object, Object, Object)
   */
  public static <K, V> Map<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3)
  {
    Map<K, V> result = Map.of(k1, v1, k2, v2, k3, v3);
    return result;
  }

  /**
   * Example call to new method {@link Map#of(Object, Object, Object, Object, Object, Object, Object, Object)}.
   * @since 9
   * @see Map#of(Object, Object, Object, Object, Object, Object, Object, Object)
   */
  public static <K, V> Map<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
  {
    Map<K, V> result = Map.of(k1, v1, k2, v2, k3, v3, k4, v4);
    return result;
  }

  /**
   * Example call to new method {@link Map#of(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)}.
   * @since 9
   * @see Map#of(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)
   */
  public static <K, V> Map<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
  {
    Map<K, V> result = Map.of(k1, v1, k2, v2, k3, v3, k4, v4, k5, v5);
    return result;
  }

  /**
   * Example call to new method {@link Map#of(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)}.
   * @since 9
   * @see Map#of(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)
   */
  public static <K, V> Map<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6)
  {
    Map<K, V> result = Map.of(k1, v1, k2, v2, k3, v3, k4, v4, k5, v5, k6, v6);
    return result;
  }

  /**
   * Example call to new method {@link Map#of(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)}.
   * @since 9
   * @see Map#of(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)
   */
  public static <K, V> Map<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6, K k7, V v7)
  {
    Map<K, V> result = Map.of(k1, v1, k2, v2, k3, v3, k4, v4, k5, v5, k6, v6, k7, v7);
    return result;
  }

  /**
   * Example call to new method {@link Map#of(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)}.
   * @since 9
   * @see Map#of(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)
   */
  public static <K, V> Map<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6, K k7, V v7, K k8, V v8)
  {
    Map<K, V> result = Map.of(k1, v1, k2, v2, k3, v3, k4, v4, k5, v5, k6, v6, k7, v7, k8, v8);
    return result;
  }

  /**
   * Example call to new method {@link Map#of(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)}.
   * @since 9
   * @see Map#of(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)
   */
  public static <K, V> Map<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6, K k7, V v7, K k8, V v8, K k9, V v9)
  {
    Map<K, V> result = Map.of(k1, v1, k2, v2, k3, v3, k4, v4, k5, v5, k6, v6, k7, v7, k8, v8, k9, v9);
    return result;
  }

  /**
   * Example call to new method {@link Map#of(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)}.
   * @since 9
   * @see Map#of(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)
   */
  public static <K, V> Map<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6, K k7, V v7, K k8, V v8, K k9, V v9, K k10, V v10)
  {
    Map<K, V> result = Map.of(k1, v1, k2, v2, k3, v3, k4, v4, k5, v5, k6, v6, k7, v7, k8, v8, k9, v9, k10, v10);
    return result;
  }

  /**
   * Example call to new method {@link Map#ofEntries(Entry...)}.
   * @since 9
   * @see Map#ofEntries(Entry...)
   */
  public static <K, V> Map<K, V> ofEntries(Entry<? extends K, ? extends V>... entries)
  {
    Map<K, V> result = Map.ofEntries(entries);
    return result;
  }

  /**
   * Example call to new method {@link Map#entry(Object, Object)}.
   * @since 9
   * @see Map#entry(Object, Object)
   */
  public static <K, V> Entry<K, V> entry(K k, V v)
  {
    Entry<K, V> result = Map.entry(k, v);
    return result;
  }

}
