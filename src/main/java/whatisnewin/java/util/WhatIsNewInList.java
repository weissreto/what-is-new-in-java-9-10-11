package whatisnewin.java.util;

import java.util.List;
import java.util.Collection;

/**
 * This source file was generated by WhatIsNewInJava.<br>
 *
 * This class provides an example call to each method in class {@link List}
 * that were newly introduced in Java versions 9, 10, 11.<br>
 *
 * {@link List} is an old class but has new fields, constructors or methods.
 * @since 1.2
 * @see List
 */
public final class WhatIsNewInList<E>
{
  /**
   * Example call to new method {@link List#of()}.
   * @since 9
   * @see List#of()
   */
  public static <E> List<E> of()
  {
    List<E> result = List.of();
    return result;
  }

  /**
   * Example call to new method {@link List#of(Object)}.
   * @since 9
   * @see List#of(Object)
   */
  public static <E> List<E> of(E e1)
  {
    List<E> result = List.of(e1);
    return result;
  }

  /**
   * Example call to new method {@link List#of(Object, Object)}.
   * @since 9
   * @see List#of(Object, Object)
   */
  public static <E> List<E> of(E e1, E e2)
  {
    List<E> result = List.of(e1, e2);
    return result;
  }

  /**
   * Example call to new method {@link List#of(Object, Object, Object)}.
   * @since 9
   * @see List#of(Object, Object, Object)
   */
  public static <E> List<E> of(E e1, E e2, E e3)
  {
    List<E> result = List.of(e1, e2, e3);
    return result;
  }

  /**
   * Example call to new method {@link List#of(Object, Object, Object, Object)}.
   * @since 9
   * @see List#of(Object, Object, Object, Object)
   */
  public static <E> List<E> of(E e1, E e2, E e3, E e4)
  {
    List<E> result = List.of(e1, e2, e3, e4);
    return result;
  }

  /**
   * Example call to new method {@link List#of(Object, Object, Object, Object, Object)}.
   * @since 9
   * @see List#of(Object, Object, Object, Object, Object)
   */
  public static <E> List<E> of(E e1, E e2, E e3, E e4, E e5)
  {
    List<E> result = List.of(e1, e2, e3, e4, e5);
    return result;
  }

  /**
   * Example call to new method {@link List#of(Object, Object, Object, Object, Object, Object)}.
   * @since 9
   * @see List#of(Object, Object, Object, Object, Object, Object)
   */
  public static <E> List<E> of(E e1, E e2, E e3, E e4, E e5, E e6)
  {
    List<E> result = List.of(e1, e2, e3, e4, e5, e6);
    return result;
  }

  /**
   * Example call to new method {@link List#of(Object, Object, Object, Object, Object, Object, Object)}.
   * @since 9
   * @see List#of(Object, Object, Object, Object, Object, Object, Object)
   */
  public static <E> List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7)
  {
    List<E> result = List.of(e1, e2, e3, e4, e5, e6, e7);
    return result;
  }

  /**
   * Example call to new method {@link List#of(Object, Object, Object, Object, Object, Object, Object, Object)}.
   * @since 9
   * @see List#of(Object, Object, Object, Object, Object, Object, Object, Object)
   */
  public static <E> List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8)
  {
    List<E> result = List.of(e1, e2, e3, e4, e5, e6, e7, e8);
    return result;
  }

  /**
   * Example call to new method {@link List#of(Object, Object, Object, Object, Object, Object, Object, Object, Object)}.
   * @since 9
   * @see List#of(Object, Object, Object, Object, Object, Object, Object, Object, Object)
   */
  public static <E> List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9)
  {
    List<E> result = List.of(e1, e2, e3, e4, e5, e6, e7, e8, e9);
    return result;
  }

  /**
   * Example call to new method {@link List#of(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)}.
   * @since 9
   * @see List#of(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)
   */
  public static <E> List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10)
  {
    List<E> result = List.of(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10);
    return result;
  }

  /**
   * Example call to new method {@link List#of(Object...)}.
   * @since 9
   * @see List#of(Object...)
   */
  public static <E> List<E> of(E... elements)
  {
    List<E> result = List.of(elements);
    return result;
  }

  /**
   * Example call to new method {@link List#copyOf(Collection)}.
   * @since 10
   * @see List#copyOf(Collection)
   */
  public static <E> List<E> copyOf(Collection<? extends E> coll)
  {
    List<E> result = List.copyOf(coll);
    return result;
  }

}
