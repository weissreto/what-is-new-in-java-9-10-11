package whatisnewin.java.util.jar;

import java.util.jar.JarFile;
import java.io.File;
import java.lang.Runtime.Version;
import java.io.IOException;
import java.util.stream.Stream;
import java.util.jar.JarEntry;

/**
 * This source file was generated by WhatIsNewInJava<br>
 *
 * This class provides an example call to each method in class {@link JarFile}
 * that were newly introduced in Java versions 9, 10, 11.<br>
 *
 * {@link JarFile} is an old class but has new fields, constructors or methods
 * @since 1.2
 * @see JarFile
 */
public final class WhatIsNewInJarFile
{
  /**
   * Example call to new constructor {@link JarFile#JarFile}
   * @since 9
   * @see JarFile#JarFile
   */
  public WhatIsNewInJarFile(File file, boolean verify, int mode, Version version) throws IOException
  {
    JarFile testee = new JarFile(file, verify, mode, version);
  }

  /**
   * Example call to new method {@link JarFile#runtimeVersion}
   * @since 9
   * @see JarFile#runtimeVersion
   */
  public static Version runtimeVersion()
  {
    Version result = JarFile.runtimeVersion();
    return result;
  }

  /**
   * Example call to new method {@link JarFile#isMultiRelease}
   * @since 9
   * @see JarFile#isMultiRelease
   */
  public boolean isMultiRelease()
  {
    JarFile testee = $$$();

    boolean result = testee.isMultiRelease();
    return result;
  }

  /**
   * Example call to new method {@link JarFile#getVersion}
   * @since 9
   * @see JarFile#getVersion
   */
  public Version getVersion()
  {
    JarFile testee = $$$();

    Version result = testee.getVersion();
    return result;
  }

  /**
   * Example call to new method {@link JarFile#versionedStream}
   * @since 10
   * @see JarFile#versionedStream
   */
  public Stream<JarEntry> versionedStream()
  {
    JarFile testee = $$$();

    Stream<JarEntry> result = testee.versionedStream();
    return result;
  }

  /**
   * Example call to new method {@link JarFile#baseVersion}
   * @since 9
   * @see JarFile#baseVersion
   */
  public static Version baseVersion()
  {
    Version result = JarFile.baseVersion();
    return result;
  }

  private JarFile $$$()
  {
    return null;
  }
}
