package whatisnewin.java.util.regex;

import java.util.regex.Matcher;
import java.util.function.Function;
import java.util.regex.MatchResult;
import java.util.stream.Stream;

/**
 * This source file was generated by WhatIsNewInJava.<br>
 *
 * This class provides an example call to each method in class {@link Matcher}
 * that were newly introduced in Java versions 9, 10, 11.<br>
 *
 * {@link Matcher} is an old class but has new fields, constructors or methods.
 * @since 1.4
 * @see Matcher
 */
public final class WhatIsNewInMatcher
{
  /**
   * Example call to new method {@link Matcher#appendReplacement(StringBuilder, String)}.
   * @since 9
   * @see Matcher#appendReplacement(StringBuilder, String)
   */
  public Matcher appendReplacement(StringBuilder sb, String replacement)
  {
    Matcher testee = $$$();

    Matcher result = testee.appendReplacement(sb, replacement);
    return result;
  }

  /**
   * Example call to new method {@link Matcher#appendTail(StringBuilder)}.
   * @since 9
   * @see Matcher#appendTail(StringBuilder)
   */
  public StringBuilder appendTail(StringBuilder sb)
  {
    Matcher testee = $$$();

    StringBuilder result = testee.appendTail(sb);
    return result;
  }

  /**
   * Example call to new method {@link Matcher#replaceAll(Function)}.
   * @since 9
   * @see Matcher#replaceAll(Function)
   */
  public String replaceAll(Function<MatchResult, String> replacer)
  {
    Matcher testee = $$$();

    String result = testee.replaceAll(replacer);
    return result;
  }

  /**
   * Example call to new method {@link Matcher#results()}.
   * @since 9
   * @see Matcher#results()
   */
  public Stream<MatchResult> results()
  {
    Matcher testee = $$$();

    Stream<MatchResult> result = testee.results();
    return result;
  }

  /**
   * Example call to new method {@link Matcher#replaceFirst(Function)}.
   * @since 9
   * @see Matcher#replaceFirst(Function)
   */
  public String replaceFirst(Function<MatchResult, String> replacer)
  {
    Matcher testee = $$$();

    String result = testee.replaceFirst(replacer);
    return result;
  }

  private Matcher $$$()
  {
    return null;
  }
}
