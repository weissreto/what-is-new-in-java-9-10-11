package whatisnewin.java.util.stream;

import java.util.stream.Stream;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;

/**
 * This source file was generated by WhatIsNewInJava.<br>
 *
 * This class provides an example call to each method in class {@link Stream}
 * that were newly introduced in Java versions 9, 10, 11.<br>
 *
 * {@link Stream} is an old class but has new fields, constructors or methods.
 * @since 1.8
 * @see Stream
 */
public final class WhatIsNewInStream<T>
{
  /**
   * Example call to new method {@link Stream#takeWhile(Predicate)}.
   * @since 9
   * @see Stream#takeWhile(Predicate)
   */
  public Stream<T> takeWhile(Predicate<? super T> predicate)
  {
    Stream<T> testee = $$$();

    Stream<T> result = testee.takeWhile(predicate);
    return result;
  }

  /**
   * Example call to new method {@link Stream#dropWhile(Predicate)}.
   * @since 9
   * @see Stream#dropWhile(Predicate)
   */
  public Stream<T> dropWhile(Predicate<? super T> predicate)
  {
    Stream<T> testee = $$$();

    Stream<T> result = testee.dropWhile(predicate);
    return result;
  }

  /**
   * Example call to new method {@link Stream#ofNullable(Object)}.
   * @since 9
   * @see Stream#ofNullable(Object)
   */
  public static <T> Stream<T> ofNullable(T t)
  {
    Stream<T> result = Stream.ofNullable(t);
    return result;
  }

  /**
   * Example call to new method {@link Stream#iterate(Object, Predicate, UnaryOperator)}.
   * @since 9
   * @see Stream#iterate(Object, Predicate, UnaryOperator)
   */
  public static <T> Stream<T> iterate(T seed, Predicate<? super T> hasNext, UnaryOperator<T> next)
  {
    Stream<T> result = Stream.iterate(seed, hasNext, next);
    return result;
  }

  private Stream<T> $$$()
  {
    return null;
  }
}
