package whatisnewin.java.lang.invoke;

import java.lang.invoke.MethodHandles.Lookup;
import java.lang.invoke.VarHandle;
import java.lang.reflect.Field;

/**
 * This source file was generated by WhatIsNewInJava.<br>
 *
 * This class provides an example call to each method in class {@link Lookup}
 * that were newly introduced in Java versions 9, 10, 11.<br>
 *
 * {@link Lookup} is an old class but has new fields, constructors or methods.
 * @since UNDEFINED
 * @see Lookup
 */
public final class WhatIsNewInMethodHandles$Lookup
{
  /**
   * Example usage of the new field {@link Lookup#MODULE}.
   * @since 9
   * @see Lookup#MODULE
   */
  public static final int MODULE = Lookup.MODULE;

  /**
   * Example usage of the new field {@link Lookup#UNCONDITIONAL}.
   * @since 9
   * @see Lookup#UNCONDITIONAL
   */
  public static final int UNCONDITIONAL = Lookup.UNCONDITIONAL;

  /**
   * Example call to new method {@link Lookup#dropLookupMode(int)}.
   * @since 9
   * @see Lookup#dropLookupMode(int)
   */
  public Lookup dropLookupMode(int modeToDrop)
  {
    Lookup testee = $$$();

    Lookup result = testee.dropLookupMode(modeToDrop);
    return result;
  }

  /**
   * Example call to new method {@link Lookup#defineClass(byte[])}.
   * @since 9
   * @see Lookup#defineClass(byte[])
   */
  public Class<?> defineClass(byte[] bytes) throws IllegalAccessException
  {
    Lookup testee = $$$();

    Class<?> result = testee.defineClass(bytes);
    return result;
  }

  /**
   * Example call to new method {@link Lookup#findClass(String)}.
   * @since 9
   * @see Lookup#findClass(String)
   */
  public Class<?> findClass(String targetName) throws ClassNotFoundException, IllegalAccessException
  {
    Lookup testee = $$$();

    Class<?> result = testee.findClass(targetName);
    return result;
  }

  /**
   * Example call to new method {@link Lookup#accessClass(Class)}.
   * @since 9
   * @see Lookup#accessClass(Class)
   */
  public Class<?> accessClass(Class<?> targetClass) throws IllegalAccessException
  {
    Lookup testee = $$$();

    Class<?> result = testee.accessClass(targetClass);
    return result;
  }

  /**
   * Example call to new method {@link Lookup#findVarHandle(Class, String, Class)}.
   * @since 9
   * @see Lookup#findVarHandle(Class, String, Class)
   */
  public VarHandle findVarHandle(Class<?> recv, String name, Class<?> type) throws NoSuchFieldException, IllegalAccessException
  {
    Lookup testee = $$$();

    VarHandle result = testee.findVarHandle(recv, name, type);
    return result;
  }

  /**
   * Example call to new method {@link Lookup#findStaticVarHandle(Class, String, Class)}.
   * @since 9
   * @see Lookup#findStaticVarHandle(Class, String, Class)
   */
  public VarHandle findStaticVarHandle(Class<?> decl, String name, Class<?> type) throws NoSuchFieldException, IllegalAccessException
  {
    Lookup testee = $$$();

    VarHandle result = testee.findStaticVarHandle(decl, name, type);
    return result;
  }

  /**
   * Example call to new method {@link Lookup#unreflectVarHandle(Field)}.
   * @since 9
   * @see Lookup#unreflectVarHandle(Field)
   */
  public VarHandle unreflectVarHandle(Field f) throws IllegalAccessException
  {
    Lookup testee = $$$();

    VarHandle result = testee.unreflectVarHandle(f);
    return result;
  }

  private Lookup $$$()
  {
    return null;
  }
}
