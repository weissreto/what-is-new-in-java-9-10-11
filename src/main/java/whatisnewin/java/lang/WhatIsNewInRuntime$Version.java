package whatisnewin.java.lang;

import java.lang.Runtime.Version;
import java.util.Optional;
import java.util.List;

/**
 * This source file was generated by WhatIsNewInJava<br>
 *
 * This class provides an example call to each method in class {@link Version}
 * that were newly introduced in Java versions 9, 10, 11.<br>
 *
 * {@link Version} is a completely new class
 * @since 9
 * @see Version
 */
public final class WhatIsNewInRuntime$Version
{
  /**
   * Example call to new method {@link Version#equalsIgnoreOptional}
   * @since 9
   * @see Version#equalsIgnoreOptional
   */
  public boolean equalsIgnoreOptional(Object obj)
  {
    Version testee = $$$();

    boolean result = testee.equalsIgnoreOptional(obj);
    return result;
  }

  /**
   * Example call to new method {@link Version#patch}
   * @since 10
   * @see Version#patch
   */
  public int patch()
  {
    Version testee = $$$();

    int result = testee.patch();
    return result;
  }

  /**
   * Example call to new method {@link Version#security}
   * @since 9
   * @see Version#security
   */
  public int security()
  {
    Version testee = $$$();

    int result = testee.security();
    return result;
  }

  /**
   * Example call to new method {@link Version#interim}
   * @since 10
   * @see Version#interim
   */
  public int interim()
  {
    Version testee = $$$();

    int result = testee.interim();
    return result;
  }

  /**
   * Example call to new method {@link Version#build}
   * @since 9
   * @see Version#build
   */
  public Optional<Integer> build()
  {
    Version testee = $$$();

    Optional<Integer> result = testee.build();
    return result;
  }

  /**
   * Example call to new method {@link Version#feature}
   * @since 10
   * @see Version#feature
   */
  public int feature()
  {
    Version testee = $$$();

    int result = testee.feature();
    return result;
  }

  /**
   * Example call to new method {@link Version#major}
   * @since 9
   * @see Version#major
   */
  public int major()
  {
    Version testee = $$$();

    int result = testee.major();
    return result;
  }

  /**
   * Example call to new method {@link Version#pre}
   * @since 9
   * @see Version#pre
   */
  public Optional<String> pre()
  {
    Version testee = $$$();

    Optional<String> result = testee.pre();
    return result;
  }

  /**
   * Example call to new method {@link Version#compareToIgnoreOptional}
   * @since 9
   * @see Version#compareToIgnoreOptional
   */
  public int compareToIgnoreOptional(Version obj)
  {
    Version testee = $$$();

    int result = testee.compareToIgnoreOptional(obj);
    return result;
  }

  /**
   * Example call to new method {@link Version#minor}
   * @since 9
   * @see Version#minor
   */
  public int minor()
  {
    Version testee = $$$();

    int result = testee.minor();
    return result;
  }

  /**
   * Example call to new method {@link Version#update}
   * @since 10
   * @see Version#update
   */
  public int update()
  {
    Version testee = $$$();

    int result = testee.update();
    return result;
  }

  /**
   * Example call to new method {@link Version#parse}
   * @since 9
   * @see Version#parse
   */
  public static Version parse(String s)
  {
    Version result = Version.parse(s);
    return result;
  }

  /**
   * Example call to new method {@link Version#compareTo}
   * @since 9
   * @see Version#compareTo
   */
  public int compareTo(Version obj)
  {
    Version testee = $$$();

    int result = testee.compareTo(obj);
    return result;
  }

  /**
   * Example call to new method {@link Version#optional}
   * @since 9
   * @see Version#optional
   */
  public Optional<String> optional()
  {
    Version testee = $$$();

    Optional<String> result = testee.optional();
    return result;
  }

  /**
   * Example call to new method {@link Version#version}
   * @since 9
   * @see Version#version
   */
  public List<Integer> version()
  {
    Version testee = $$$();

    List<Integer> result = testee.version();
    return result;
  }

  private Version $$$()
  {
    return null;
  }
}
