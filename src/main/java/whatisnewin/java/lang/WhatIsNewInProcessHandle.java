package whatisnewin.java.lang;

import java.util.Optional;
import java.util.stream.Stream;
import java.lang.ProcessHandle.Info;
import java.util.concurrent.CompletableFuture;

/**
 * This source file was generated by WhatIsNewInJava.<br>
 *
 * This class provides an example call to each method in class {@link ProcessHandle}
 * that were newly introduced in Java versions 9, 10, 11.<br>
 *
 * {@link ProcessHandle} is a completely new class.
 * @since 9
 * @see ProcessHandle
 */
public final class WhatIsNewInProcessHandle
{
  /**
   * Example call to new method {@link ProcessHandle#pid()}.
   * @since 9
   * @see ProcessHandle#pid()
   */
  public long pid()
  {
    ProcessHandle testee = $$$();

    long result = testee.pid();
    return result;
  }

  /**
   * Example call to new method {@link ProcessHandle#of(long)}.
   * @since 9
   * @see ProcessHandle#of(long)
   */
  public static Optional<ProcessHandle> of(long pid)
  {
    Optional<ProcessHandle> result = ProcessHandle.of(pid);
    return result;
  }

  /**
   * Example call to new method {@link ProcessHandle#current()}.
   * @since 9
   * @see ProcessHandle#current()
   */
  public static ProcessHandle current()
  {
    ProcessHandle result = ProcessHandle.current();
    return result;
  }

  /**
   * Example call to new method {@link ProcessHandle#parent()}.
   * @since 9
   * @see ProcessHandle#parent()
   */
  public Optional<ProcessHandle> parent()
  {
    ProcessHandle testee = $$$();

    Optional<ProcessHandle> result = testee.parent();
    return result;
  }

  /**
   * Example call to new method {@link ProcessHandle#children()}.
   * @since 9
   * @see ProcessHandle#children()
   */
  public Stream<ProcessHandle> children()
  {
    ProcessHandle testee = $$$();

    Stream<ProcessHandle> result = testee.children();
    return result;
  }

  /**
   * Example call to new method {@link ProcessHandle#descendants()}.
   * @since 9
   * @see ProcessHandle#descendants()
   */
  public Stream<ProcessHandle> descendants()
  {
    ProcessHandle testee = $$$();

    Stream<ProcessHandle> result = testee.descendants();
    return result;
  }

  /**
   * Example call to new method {@link ProcessHandle#allProcesses()}.
   * @since 9
   * @see ProcessHandle#allProcesses()
   */
  public static Stream<ProcessHandle> allProcesses()
  {
    Stream<ProcessHandle> result = ProcessHandle.allProcesses();
    return result;
  }

  /**
   * Example call to new method {@link ProcessHandle#info()}.
   * @since 9
   * @see ProcessHandle#info()
   */
  public Info info()
  {
    ProcessHandle testee = $$$();

    Info result = testee.info();
    return result;
  }

  /**
   * Example call to new method {@link ProcessHandle#onExit()}.
   * @since 9
   * @see ProcessHandle#onExit()
   */
  public CompletableFuture<ProcessHandle> onExit()
  {
    ProcessHandle testee = $$$();

    CompletableFuture<ProcessHandle> result = testee.onExit();
    return result;
  }

  /**
   * Example call to new method {@link ProcessHandle#supportsNormalTermination()}.
   * @since 9
   * @see ProcessHandle#supportsNormalTermination()
   */
  public boolean supportsNormalTermination()
  {
    ProcessHandle testee = $$$();

    boolean result = testee.supportsNormalTermination();
    return result;
  }

  /**
   * Example call to new method {@link ProcessHandle#destroy()}.
   * @since 9
   * @see ProcessHandle#destroy()
   */
  public boolean destroy()
  {
    ProcessHandle testee = $$$();

    boolean result = testee.destroy();
    return result;
  }

  /**
   * Example call to new method {@link ProcessHandle#destroyForcibly()}.
   * @since 9
   * @see ProcessHandle#destroyForcibly()
   */
  public boolean destroyForcibly()
  {
    ProcessHandle testee = $$$();

    boolean result = testee.destroyForcibly();
    return result;
  }

  /**
   * Example call to new method {@link ProcessHandle#isAlive()}.
   * @since 9
   * @see ProcessHandle#isAlive()
   */
  public boolean isAlive()
  {
    ProcessHandle testee = $$$();

    boolean result = testee.isAlive();
    return result;
  }

  /**
   * Example call to new method {@link ProcessHandle#compareTo(ProcessHandle)}.
   * @since 9
   * @see ProcessHandle#compareTo(ProcessHandle)
   */
  public int compareTo(ProcessHandle other)
  {
    ProcessHandle testee = $$$();

    int result = testee.compareTo(other);
    return result;
  }

  private ProcessHandle $$$()
  {
    return null;
  }
}
