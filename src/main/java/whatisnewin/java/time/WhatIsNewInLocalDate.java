package whatisnewin.java.time;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneOffset;
import java.util.stream.Stream;
import java.time.Period;
import java.time.Instant;
import java.time.ZoneId;

/**
 * This source file was generated by WhatIsNewInJava<br>
 *
 * This class provides an example call to each method in class {@link LocalDate}
 * that were newly introduced in Java versions 9, 10, 11.<br>
 *
 * {@link LocalDate} is an old class but has new fields, constructors or methods
 * @since 1.8
 * @see LocalDate
 */
public final class WhatIsNewInLocalDate
{
  /**
   * Example call to new method {@link LocalDate#toEpochSecond}
   * @since 9
   * @see LocalDate#toEpochSecond
   */
  public long toEpochSecond(LocalTime time, ZoneOffset offset)
  {
    LocalDate testee = $$$();

    long result = testee.toEpochSecond(time, offset);
    return result;
  }

  /**
   * Example call to new method {@link LocalDate#datesUntil}
   * @since 9
   * @see LocalDate#datesUntil
   */
  public Stream<LocalDate> datesUntil(LocalDate endExclusive)
  {
    LocalDate testee = $$$();

    Stream<LocalDate> result = testee.datesUntil(endExclusive);
    return result;
  }

  /**
   * Example call to new method {@link LocalDate#datesUntil}
   * @since 9
   * @see LocalDate#datesUntil
   */
  public Stream<LocalDate> datesUntil(LocalDate endExclusive, Period step)
  {
    LocalDate testee = $$$();

    Stream<LocalDate> result = testee.datesUntil(endExclusive, step);
    return result;
  }

  /**
   * Example call to new method {@link LocalDate#ofInstant}
   * @since 9
   * @see LocalDate#ofInstant
   */
  public static LocalDate ofInstant(Instant instant, ZoneId zone)
  {
    LocalDate result = LocalDate.ofInstant(instant, zone);
    return result;
  }

  private LocalDate $$$()
  {
    return null;
  }
}
