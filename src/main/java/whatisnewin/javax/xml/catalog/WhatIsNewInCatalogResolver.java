package whatisnewin.javax.xml.catalog;

import javax.xml.catalog.CatalogResolver;
import javax.xml.transform.Source;
import org.w3c.dom.ls.LSInput;
import org.xml.sax.InputSource;
import java.io.InputStream;

/**
 * This source file was generated by WhatIsNewInJava<br>
 *
 * This class provides an example call to each method in class {@link CatalogResolver}
 * that were newly introduced in Java versions 9, 10, 11.<br>
 *
 * {@link CatalogResolver} is a completely new class
 * @since 9
 * @see CatalogResolver
 */
public final class WhatIsNewInCatalogResolver
{
  /**
   * Example call to new method {@link CatalogResolver#resolve}
   * @since 9
   * @see CatalogResolver#resolve
   */
  public Source resolve(String href, String base)
  {
    CatalogResolver testee = $$$();

    Source result = testee.resolve(href, base);
    return result;
  }

  /**
   * Example call to new method {@link CatalogResolver#resolveResource}
   * @since 9
   * @see CatalogResolver#resolveResource
   */
  public LSInput resolveResource(String type, String namespaceUri, String publicId, String systemId, String baseUri)
  {
    CatalogResolver testee = $$$();

    LSInput result = testee.resolveResource(type, namespaceUri, publicId, systemId, baseUri);
    return result;
  }

  /**
   * Example call to new method {@link CatalogResolver#resolveEntity}
   * @since 9
   * @see CatalogResolver#resolveEntity
   */
  public InputSource resolveEntity(String publicId, String systemId)
  {
    CatalogResolver testee = $$$();

    InputSource result = testee.resolveEntity(publicId, systemId);
    return result;
  }

  /**
   * Example call to new method {@link CatalogResolver#resolveEntity}
   * @since 9
   * @see CatalogResolver#resolveEntity
   */
  public InputStream resolveEntity(String publicId, String systemId, String baseUri, String namespace)
  {
    CatalogResolver testee = $$$();

    InputStream result = testee.resolveEntity(publicId, systemId, baseUri, namespace);
    return result;
  }

  private CatalogResolver $$$()
  {
    return null;
  }
}
