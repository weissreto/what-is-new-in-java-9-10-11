package whatisnewin.javax.lang.model.util;

import javax.lang.model.util.ElementFilter;
import java.util.List;
import javax.lang.model.element.ModuleElement;
import javax.lang.model.element.Element;
import java.util.Set;
import javax.lang.model.element.ModuleElement.ExportsDirective;
import javax.lang.model.element.ModuleElement.Directive;
import javax.lang.model.element.ModuleElement.OpensDirective;
import javax.lang.model.element.ModuleElement.ProvidesDirective;
import javax.lang.model.element.ModuleElement.RequiresDirective;

/**
 * This source file was generated by WhatIsNewInJava.<br>
 *
 * This class provides an example call to each method in class {@link ElementFilter}
 * that were newly introduced in Java versions 9, 10, 11.<br>
 *
 * {@link ElementFilter} is an old class but has new fields, constructors or methods.
 * @since 1.6
 * @see ElementFilter
 */
public final class WhatIsNewInElementFilter
{
  /**
   * Example call to new method {@link ElementFilter#modulesIn(Iterable)}.
   * @since 9
   * @see ElementFilter#modulesIn(Iterable)
   */
  public static List<ModuleElement> modulesIn(Iterable<? extends Element> elements)
  {
    List<ModuleElement> result = ElementFilter.modulesIn(elements);
    return result;
  }

  /**
   * Example call to new method {@link ElementFilter#modulesIn(Set)}.
   * @since 9
   * @see ElementFilter#modulesIn(Set)
   */
  public static Set<ModuleElement> modulesIn(Set<? extends Element> elements)
  {
    Set<ModuleElement> result = ElementFilter.modulesIn(elements);
    return result;
  }

  /**
   * Example call to new method {@link ElementFilter#exportsIn(Iterable)}.
   * @since 9
   * @see ElementFilter#exportsIn(Iterable)
   */
  public static List<ExportsDirective> exportsIn(Iterable<? extends Directive> directives)
  {
    List<ExportsDirective> result = ElementFilter.exportsIn(directives);
    return result;
  }

  /**
   * Example call to new method {@link ElementFilter#opensIn(Iterable)}.
   * @since 9
   * @see ElementFilter#opensIn(Iterable)
   */
  public static List<OpensDirective> opensIn(Iterable<? extends Directive> directives)
  {
    List<OpensDirective> result = ElementFilter.opensIn(directives);
    return result;
  }

  /**
   * Example call to new method {@link ElementFilter#providesIn(Iterable)}.
   * @since 9
   * @see ElementFilter#providesIn(Iterable)
   */
  public static List<ProvidesDirective> providesIn(Iterable<? extends Directive> directives)
  {
    List<ProvidesDirective> result = ElementFilter.providesIn(directives);
    return result;
  }

  /**
   * Example call to new method {@link ElementFilter#requiresIn(Iterable)}.
   * @since 9
   * @see ElementFilter#requiresIn(Iterable)
   */
  public static List<RequiresDirective> requiresIn(Iterable<? extends Directive> directives)
  {
    List<RequiresDirective> result = ElementFilter.requiresIn(directives);
    return result;
  }

}
