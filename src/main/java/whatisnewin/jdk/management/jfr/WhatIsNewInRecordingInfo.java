package whatisnewin.jdk.management.jfr;

import jdk.management.jfr.RecordingInfo;
import javax.management.openmbean.CompositeData;
import java.util.Map;

/**
 * This source file was generated by WhatIsNewInJava<br>
 *
 * This class provides an example call to each method in class {@link RecordingInfo}
 * that were newly introduced in Java versions 9, 10, 11.<br>
 *
 * {@link RecordingInfo} is a completely new class
 * @since 9
 * @see RecordingInfo
 */
public final class WhatIsNewInRecordingInfo
{
  /**
   * Example call to new method {@link RecordingInfo#getStartTime}
   * @since 9
   * @see RecordingInfo#getStartTime
   */
  public long getStartTime()
  {
    RecordingInfo testee = $$$();

    long result = testee.getStartTime();
    return result;
  }

  /**
   * Example call to new method {@link RecordingInfo#from}
   * @since 9
   * @see RecordingInfo#from
   */
  public static RecordingInfo from(CompositeData cd)
  {
    RecordingInfo result = RecordingInfo.from(cd);
    return result;
  }

  /**
   * Example call to new method {@link RecordingInfo#isToDisk}
   * @since 9
   * @see RecordingInfo#isToDisk
   */
  public boolean isToDisk()
  {
    RecordingInfo testee = $$$();

    boolean result = testee.isToDisk();
    return result;
  }

  /**
   * Example call to new method {@link RecordingInfo#getMaxSize}
   * @since 9
   * @see RecordingInfo#getMaxSize
   */
  public long getMaxSize()
  {
    RecordingInfo testee = $$$();

    long result = testee.getMaxSize();
    return result;
  }

  /**
   * Example call to new method {@link RecordingInfo#getState}
   * @since 9
   * @see RecordingInfo#getState
   */
  public String getState()
  {
    RecordingInfo testee = $$$();

    String result = testee.getState();
    return result;
  }

  /**
   * Example call to new method {@link RecordingInfo#getSize}
   * @since 9
   * @see RecordingInfo#getSize
   */
  public long getSize()
  {
    RecordingInfo testee = $$$();

    long result = testee.getSize();
    return result;
  }

  /**
   * Example call to new method {@link RecordingInfo#getStopTime}
   * @since 9
   * @see RecordingInfo#getStopTime
   */
  public long getStopTime()
  {
    RecordingInfo testee = $$$();

    long result = testee.getStopTime();
    return result;
  }

  /**
   * Example call to new method {@link RecordingInfo#getMaxAge}
   * @since 9
   * @see RecordingInfo#getMaxAge
   */
  public long getMaxAge()
  {
    RecordingInfo testee = $$$();

    long result = testee.getMaxAge();
    return result;
  }

  /**
   * Example call to new method {@link RecordingInfo#getDuration}
   * @since 9
   * @see RecordingInfo#getDuration
   */
  public long getDuration()
  {
    RecordingInfo testee = $$$();

    long result = testee.getDuration();
    return result;
  }

  /**
   * Example call to new method {@link RecordingInfo#getId}
   * @since 9
   * @see RecordingInfo#getId
   */
  public long getId()
  {
    RecordingInfo testee = $$$();

    long result = testee.getId();
    return result;
  }

  /**
   * Example call to new method {@link RecordingInfo#getDumpOnExit}
   * @since 9
   * @see RecordingInfo#getDumpOnExit
   */
  public boolean getDumpOnExit()
  {
    RecordingInfo testee = $$$();

    boolean result = testee.getDumpOnExit();
    return result;
  }

  /**
   * Example call to new method {@link RecordingInfo#getName}
   * @since 9
   * @see RecordingInfo#getName
   */
  public String getName()
  {
    RecordingInfo testee = $$$();

    String result = testee.getName();
    return result;
  }

  /**
   * Example call to new method {@link RecordingInfo#getSettings}
   * @since 9
   * @see RecordingInfo#getSettings
   */
  public Map<String, String> getSettings()
  {
    RecordingInfo testee = $$$();

    Map<String, String> result = testee.getSettings();
    return result;
  }

  /**
   * Example call to new method {@link RecordingInfo#getDestination}
   * @since 9
   * @see RecordingInfo#getDestination
   */
  public String getDestination()
  {
    RecordingInfo testee = $$$();

    String result = testee.getDestination();
    return result;
  }

  private RecordingInfo $$$()
  {
    return null;
  }
}
