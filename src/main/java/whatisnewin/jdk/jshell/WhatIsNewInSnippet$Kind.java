package whatisnewin.jdk.jshell;

import jdk.jshell.Snippet.Kind;

/**
 * This source file was generated by WhatIsNewInJava.<br>
 *
 * This class provides an example call to each method in class {@link Kind}
 * that were newly introduced in Java versions 9, 10, 11.<br>
 *
 * {@link Kind} is a completely new class.
 * @since 9
 * @see Kind
 */
public final class WhatIsNewInSnippet$Kind
{
  /**
   * Example usage of the new field {@link Kind#IMPORT}.
   * @since 9
   * @see Kind#IMPORT
   */
  public static final Kind IMPORT = Kind.IMPORT;

  /**
   * Example usage of the new field {@link Kind#TYPE_DECL}.
   * @since 9
   * @see Kind#TYPE_DECL
   */
  public static final Kind TYPE_DECL = Kind.TYPE_DECL;

  /**
   * Example usage of the new field {@link Kind#METHOD}.
   * @since 9
   * @see Kind#METHOD
   */
  public static final Kind METHOD = Kind.METHOD;

  /**
   * Example usage of the new field {@link Kind#VAR}.
   * @since 9
   * @see Kind#VAR
   */
  public static final Kind VAR = Kind.VAR;

  /**
   * Example usage of the new field {@link Kind#EXPRESSION}.
   * @since 9
   * @see Kind#EXPRESSION
   */
  public static final Kind EXPRESSION = Kind.EXPRESSION;

  /**
   * Example usage of the new field {@link Kind#STATEMENT}.
   * @since 9
   * @see Kind#STATEMENT
   */
  public static final Kind STATEMENT = Kind.STATEMENT;

  /**
   * Example usage of the new field {@link Kind#ERRONEOUS}.
   * @since 9
   * @see Kind#ERRONEOUS
   */
  public static final Kind ERRONEOUS = Kind.ERRONEOUS;

  /**
   * Example call to new method {@link Kind#values()}.
   * @since 9
   * @see Kind#values()
   */
  public static Kind[] values()
  {
    Kind[] result = Kind.values();
    return result;
  }

  /**
   * Example call to new method {@link Kind#valueOf(String)}.
   * @since 9
   * @see Kind#valueOf(String)
   */
  public static Kind valueOf(String name)
  {
    Kind result = Kind.valueOf(name);
    return result;
  }

  /**
   * Example call to new method {@link Kind#isPersistent()}.
   * @since 9
   * @see Kind#isPersistent()
   */
  public boolean isPersistent()
  {
    Kind testee = $$$();

    boolean result = testee.isPersistent();
    return result;
  }

  private Kind $$$()
  {
    return null;
  }
}
