package whatisnewin.jdk.nashorn.api.tree;

import jdk.nashorn.api.tree.Tree.Kind;
import jdk.nashorn.api.tree.Tree;

/**
 * This source file was generated by WhatIsNewInJava.<br>
 *
 * This class provides an example call to each method in class {@link Kind}
 * that were newly introduced in Java versions 9, 10, 11.<br>
 *
 * {@link Kind} is a completely new class.
 * @since 9
 * @see Kind
 */
public final class WhatIsNewInTree$Kind
{
  /**
   * Example usage of the new field {@link Kind#ARRAY_ACCESS}.
   * @since 9
   * @see Kind#ARRAY_ACCESS
   */
  public static final Kind ARRAY_ACCESS = Kind.ARRAY_ACCESS;

  /**
   * Example usage of the new field {@link Kind#ARRAY_LITERAL}.
   * @since 9
   * @see Kind#ARRAY_LITERAL
   */
  public static final Kind ARRAY_LITERAL = Kind.ARRAY_LITERAL;

  /**
   * Example usage of the new field {@link Kind#ASSIGNMENT}.
   * @since 9
   * @see Kind#ASSIGNMENT
   */
  public static final Kind ASSIGNMENT = Kind.ASSIGNMENT;

  /**
   * Example usage of the new field {@link Kind#BLOCK}.
   * @since 9
   * @see Kind#BLOCK
   */
  public static final Kind BLOCK = Kind.BLOCK;

  /**
   * Example usage of the new field {@link Kind#BREAK}.
   * @since 9
   * @see Kind#BREAK
   */
  public static final Kind BREAK = Kind.BREAK;

  /**
   * Example usage of the new field {@link Kind#CLASS}.
   * @since 9
   * @see Kind#CLASS
   */
  public static final Kind CLASS = Kind.CLASS;

  /**
   * Example usage of the new field {@link Kind#CLASS_EXPRESSION}.
   * @since 9
   * @see Kind#CLASS_EXPRESSION
   */
  public static final Kind CLASS_EXPRESSION = Kind.CLASS_EXPRESSION;

  /**
   * Example usage of the new field {@link Kind#CASE}.
   * @since 9
   * @see Kind#CASE
   */
  public static final Kind CASE = Kind.CASE;

  /**
   * Example usage of the new field {@link Kind#CATCH}.
   * @since 9
   * @see Kind#CATCH
   */
  public static final Kind CATCH = Kind.CATCH;

  /**
   * Example usage of the new field {@link Kind#COMPILATION_UNIT}.
   * @since 9
   * @see Kind#COMPILATION_UNIT
   */
  public static final Kind COMPILATION_UNIT = Kind.COMPILATION_UNIT;

  /**
   * Example usage of the new field {@link Kind#CONDITIONAL_EXPRESSION}.
   * @since 9
   * @see Kind#CONDITIONAL_EXPRESSION
   */
  public static final Kind CONDITIONAL_EXPRESSION = Kind.CONDITIONAL_EXPRESSION;

  /**
   * Example usage of the new field {@link Kind#CONTINUE}.
   * @since 9
   * @see Kind#CONTINUE
   */
  public static final Kind CONTINUE = Kind.CONTINUE;

  /**
   * Example usage of the new field {@link Kind#DO_WHILE_LOOP}.
   * @since 9
   * @see Kind#DO_WHILE_LOOP
   */
  public static final Kind DO_WHILE_LOOP = Kind.DO_WHILE_LOOP;

  /**
   * Example usage of the new field {@link Kind#DEBUGGER}.
   * @since 9
   * @see Kind#DEBUGGER
   */
  public static final Kind DEBUGGER = Kind.DEBUGGER;

  /**
   * Example usage of the new field {@link Kind#FOR_IN_LOOP}.
   * @since 9
   * @see Kind#FOR_IN_LOOP
   */
  public static final Kind FOR_IN_LOOP = Kind.FOR_IN_LOOP;

  /**
   * Example usage of the new field {@link Kind#FUNCTION_EXPRESSION}.
   * @since 9
   * @see Kind#FUNCTION_EXPRESSION
   */
  public static final Kind FUNCTION_EXPRESSION = Kind.FUNCTION_EXPRESSION;

  /**
   * Example usage of the new field {@link Kind#ERROR}.
   * @since 9
   * @see Kind#ERROR
   */
  public static final Kind ERROR = Kind.ERROR;

  /**
   * Example usage of the new field {@link Kind#EXPRESSION_STATEMENT}.
   * @since 9
   * @see Kind#EXPRESSION_STATEMENT
   */
  public static final Kind EXPRESSION_STATEMENT = Kind.EXPRESSION_STATEMENT;

  /**
   * Example usage of the new field {@link Kind#MEMBER_SELECT}.
   * @since 9
   * @see Kind#MEMBER_SELECT
   */
  public static final Kind MEMBER_SELECT = Kind.MEMBER_SELECT;

  /**
   * Example usage of the new field {@link Kind#FOR_LOOP}.
   * @since 9
   * @see Kind#FOR_LOOP
   */
  public static final Kind FOR_LOOP = Kind.FOR_LOOP;

  /**
   * Example usage of the new field {@link Kind#IDENTIFIER}.
   * @since 9
   * @see Kind#IDENTIFIER
   */
  public static final Kind IDENTIFIER = Kind.IDENTIFIER;

  /**
   * Example usage of the new field {@link Kind#IF}.
   * @since 9
   * @see Kind#IF
   */
  public static final Kind IF = Kind.IF;

  /**
   * Example usage of the new field {@link Kind#INSTANCE_OF}.
   * @since 9
   * @see Kind#INSTANCE_OF
   */
  public static final Kind INSTANCE_OF = Kind.INSTANCE_OF;

  /**
   * Example usage of the new field {@link Kind#LABELED_STATEMENT}.
   * @since 9
   * @see Kind#LABELED_STATEMENT
   */
  public static final Kind LABELED_STATEMENT = Kind.LABELED_STATEMENT;

  /**
   * Example usage of the new field {@link Kind#MODULE}.
   * @since 9
   * @see Kind#MODULE
   */
  public static final Kind MODULE = Kind.MODULE;

  /**
   * Example usage of the new field {@link Kind#EXPORT_ENTRY}.
   * @since 9
   * @see Kind#EXPORT_ENTRY
   */
  public static final Kind EXPORT_ENTRY = Kind.EXPORT_ENTRY;

  /**
   * Example usage of the new field {@link Kind#IMPORT_ENTRY}.
   * @since 9
   * @see Kind#IMPORT_ENTRY
   */
  public static final Kind IMPORT_ENTRY = Kind.IMPORT_ENTRY;

  /**
   * Example usage of the new field {@link Kind#FUNCTION}.
   * @since 9
   * @see Kind#FUNCTION
   */
  public static final Kind FUNCTION = Kind.FUNCTION;

  /**
   * Example usage of the new field {@link Kind#FUNCTION_INVOCATION}.
   * @since 9
   * @see Kind#FUNCTION_INVOCATION
   */
  public static final Kind FUNCTION_INVOCATION = Kind.FUNCTION_INVOCATION;

  /**
   * Example usage of the new field {@link Kind#NEW}.
   * @since 9
   * @see Kind#NEW
   */
  public static final Kind NEW = Kind.NEW;

  /**
   * Example usage of the new field {@link Kind#OBJECT_LITERAL}.
   * @since 9
   * @see Kind#OBJECT_LITERAL
   */
  public static final Kind OBJECT_LITERAL = Kind.OBJECT_LITERAL;

  /**
   * Example usage of the new field {@link Kind#PARENTHESIZED}.
   * @since 9
   * @see Kind#PARENTHESIZED
   */
  public static final Kind PARENTHESIZED = Kind.PARENTHESIZED;

  /**
   * Example usage of the new field {@link Kind#PROPERTY}.
   * @since 9
   * @see Kind#PROPERTY
   */
  public static final Kind PROPERTY = Kind.PROPERTY;

  /**
   * Example usage of the new field {@link Kind#REGEXP_LITERAL}.
   * @since 9
   * @see Kind#REGEXP_LITERAL
   */
  public static final Kind REGEXP_LITERAL = Kind.REGEXP_LITERAL;

  /**
   * Example usage of the new field {@link Kind#TEMPLATE_LITERAL}.
   * @since 9
   * @see Kind#TEMPLATE_LITERAL
   */
  public static final Kind TEMPLATE_LITERAL = Kind.TEMPLATE_LITERAL;

  /**
   * Example usage of the new field {@link Kind#RETURN}.
   * @since 9
   * @see Kind#RETURN
   */
  public static final Kind RETURN = Kind.RETURN;

  /**
   * Example usage of the new field {@link Kind#EMPTY_STATEMENT}.
   * @since 9
   * @see Kind#EMPTY_STATEMENT
   */
  public static final Kind EMPTY_STATEMENT = Kind.EMPTY_STATEMENT;

  /**
   * Example usage of the new field {@link Kind#SWITCH}.
   * @since 9
   * @see Kind#SWITCH
   */
  public static final Kind SWITCH = Kind.SWITCH;

  /**
   * Example usage of the new field {@link Kind#THROW}.
   * @since 9
   * @see Kind#THROW
   */
  public static final Kind THROW = Kind.THROW;

  /**
   * Example usage of the new field {@link Kind#TRY}.
   * @since 9
   * @see Kind#TRY
   */
  public static final Kind TRY = Kind.TRY;

  /**
   * Example usage of the new field {@link Kind#VARIABLE}.
   * @since 9
   * @see Kind#VARIABLE
   */
  public static final Kind VARIABLE = Kind.VARIABLE;

  /**
   * Example usage of the new field {@link Kind#WHILE_LOOP}.
   * @since 9
   * @see Kind#WHILE_LOOP
   */
  public static final Kind WHILE_LOOP = Kind.WHILE_LOOP;

  /**
   * Example usage of the new field {@link Kind#WITH}.
   * @since 9
   * @see Kind#WITH
   */
  public static final Kind WITH = Kind.WITH;

  /**
   * Example usage of the new field {@link Kind#POSTFIX_INCREMENT}.
   * @since 9
   * @see Kind#POSTFIX_INCREMENT
   */
  public static final Kind POSTFIX_INCREMENT = Kind.POSTFIX_INCREMENT;

  /**
   * Example usage of the new field {@link Kind#POSTFIX_DECREMENT}.
   * @since 9
   * @see Kind#POSTFIX_DECREMENT
   */
  public static final Kind POSTFIX_DECREMENT = Kind.POSTFIX_DECREMENT;

  /**
   * Example usage of the new field {@link Kind#PREFIX_INCREMENT}.
   * @since 9
   * @see Kind#PREFIX_INCREMENT
   */
  public static final Kind PREFIX_INCREMENT = Kind.PREFIX_INCREMENT;

  /**
   * Example usage of the new field {@link Kind#PREFIX_DECREMENT}.
   * @since 9
   * @see Kind#PREFIX_DECREMENT
   */
  public static final Kind PREFIX_DECREMENT = Kind.PREFIX_DECREMENT;

  /**
   * Example usage of the new field {@link Kind#UNARY_PLUS}.
   * @since 9
   * @see Kind#UNARY_PLUS
   */
  public static final Kind UNARY_PLUS = Kind.UNARY_PLUS;

  /**
   * Example usage of the new field {@link Kind#UNARY_MINUS}.
   * @since 9
   * @see Kind#UNARY_MINUS
   */
  public static final Kind UNARY_MINUS = Kind.UNARY_MINUS;

  /**
   * Example usage of the new field {@link Kind#BITWISE_COMPLEMENT}.
   * @since 9
   * @see Kind#BITWISE_COMPLEMENT
   */
  public static final Kind BITWISE_COMPLEMENT = Kind.BITWISE_COMPLEMENT;

  /**
   * Example usage of the new field {@link Kind#LOGICAL_COMPLEMENT}.
   * @since 9
   * @see Kind#LOGICAL_COMPLEMENT
   */
  public static final Kind LOGICAL_COMPLEMENT = Kind.LOGICAL_COMPLEMENT;

  /**
   * Example usage of the new field {@link Kind#DELETE}.
   * @since 9
   * @see Kind#DELETE
   */
  public static final Kind DELETE = Kind.DELETE;

  /**
   * Example usage of the new field {@link Kind#TYPEOF}.
   * @since 9
   * @see Kind#TYPEOF
   */
  public static final Kind TYPEOF = Kind.TYPEOF;

  /**
   * Example usage of the new field {@link Kind#VOID}.
   * @since 9
   * @see Kind#VOID
   */
  public static final Kind VOID = Kind.VOID;

  /**
   * Example usage of the new field {@link Kind#COMMA}.
   * @since 9
   * @see Kind#COMMA
   */
  public static final Kind COMMA = Kind.COMMA;

  /**
   * Example usage of the new field {@link Kind#MULTIPLY}.
   * @since 9
   * @see Kind#MULTIPLY
   */
  public static final Kind MULTIPLY = Kind.MULTIPLY;

  /**
   * Example usage of the new field {@link Kind#DIVIDE}.
   * @since 9
   * @see Kind#DIVIDE
   */
  public static final Kind DIVIDE = Kind.DIVIDE;

  /**
   * Example usage of the new field {@link Kind#REMAINDER}.
   * @since 9
   * @see Kind#REMAINDER
   */
  public static final Kind REMAINDER = Kind.REMAINDER;

  /**
   * Example usage of the new field {@link Kind#PLUS}.
   * @since 9
   * @see Kind#PLUS
   */
  public static final Kind PLUS = Kind.PLUS;

  /**
   * Example usage of the new field {@link Kind#MINUS}.
   * @since 9
   * @see Kind#MINUS
   */
  public static final Kind MINUS = Kind.MINUS;

  /**
   * Example usage of the new field {@link Kind#LEFT_SHIFT}.
   * @since 9
   * @see Kind#LEFT_SHIFT
   */
  public static final Kind LEFT_SHIFT = Kind.LEFT_SHIFT;

  /**
   * Example usage of the new field {@link Kind#RIGHT_SHIFT}.
   * @since 9
   * @see Kind#RIGHT_SHIFT
   */
  public static final Kind RIGHT_SHIFT = Kind.RIGHT_SHIFT;

  /**
   * Example usage of the new field {@link Kind#UNSIGNED_RIGHT_SHIFT}.
   * @since 9
   * @see Kind#UNSIGNED_RIGHT_SHIFT
   */
  public static final Kind UNSIGNED_RIGHT_SHIFT = Kind.UNSIGNED_RIGHT_SHIFT;

  /**
   * Example usage of the new field {@link Kind#LESS_THAN}.
   * @since 9
   * @see Kind#LESS_THAN
   */
  public static final Kind LESS_THAN = Kind.LESS_THAN;

  /**
   * Example usage of the new field {@link Kind#GREATER_THAN}.
   * @since 9
   * @see Kind#GREATER_THAN
   */
  public static final Kind GREATER_THAN = Kind.GREATER_THAN;

  /**
   * Example usage of the new field {@link Kind#LESS_THAN_EQUAL}.
   * @since 9
   * @see Kind#LESS_THAN_EQUAL
   */
  public static final Kind LESS_THAN_EQUAL = Kind.LESS_THAN_EQUAL;

  /**
   * Example usage of the new field {@link Kind#GREATER_THAN_EQUAL}.
   * @since 9
   * @see Kind#GREATER_THAN_EQUAL
   */
  public static final Kind GREATER_THAN_EQUAL = Kind.GREATER_THAN_EQUAL;

  /**
   * Example usage of the new field {@link Kind#IN}.
   * @since 9
   * @see Kind#IN
   */
  public static final Kind IN = Kind.IN;

  /**
   * Example usage of the new field {@link Kind#EQUAL_TO}.
   * @since 9
   * @see Kind#EQUAL_TO
   */
  public static final Kind EQUAL_TO = Kind.EQUAL_TO;

  /**
   * Example usage of the new field {@link Kind#NOT_EQUAL_TO}.
   * @since 9
   * @see Kind#NOT_EQUAL_TO
   */
  public static final Kind NOT_EQUAL_TO = Kind.NOT_EQUAL_TO;

  /**
   * Example usage of the new field {@link Kind#STRICT_EQUAL_TO}.
   * @since 9
   * @see Kind#STRICT_EQUAL_TO
   */
  public static final Kind STRICT_EQUAL_TO = Kind.STRICT_EQUAL_TO;

  /**
   * Example usage of the new field {@link Kind#STRICT_NOT_EQUAL_TO}.
   * @since 9
   * @see Kind#STRICT_NOT_EQUAL_TO
   */
  public static final Kind STRICT_NOT_EQUAL_TO = Kind.STRICT_NOT_EQUAL_TO;

  /**
   * Example usage of the new field {@link Kind#AND}.
   * @since 9
   * @see Kind#AND
   */
  public static final Kind AND = Kind.AND;

  /**
   * Example usage of the new field {@link Kind#XOR}.
   * @since 9
   * @see Kind#XOR
   */
  public static final Kind XOR = Kind.XOR;

  /**
   * Example usage of the new field {@link Kind#OR}.
   * @since 9
   * @see Kind#OR
   */
  public static final Kind OR = Kind.OR;

  /**
   * Example usage of the new field {@link Kind#CONDITIONAL_AND}.
   * @since 9
   * @see Kind#CONDITIONAL_AND
   */
  public static final Kind CONDITIONAL_AND = Kind.CONDITIONAL_AND;

  /**
   * Example usage of the new field {@link Kind#CONDITIONAL_OR}.
   * @since 9
   * @see Kind#CONDITIONAL_OR
   */
  public static final Kind CONDITIONAL_OR = Kind.CONDITIONAL_OR;

  /**
   * Example usage of the new field {@link Kind#MULTIPLY_ASSIGNMENT}.
   * @since 9
   * @see Kind#MULTIPLY_ASSIGNMENT
   */
  public static final Kind MULTIPLY_ASSIGNMENT = Kind.MULTIPLY_ASSIGNMENT;

  /**
   * Example usage of the new field {@link Kind#DIVIDE_ASSIGNMENT}.
   * @since 9
   * @see Kind#DIVIDE_ASSIGNMENT
   */
  public static final Kind DIVIDE_ASSIGNMENT = Kind.DIVIDE_ASSIGNMENT;

  /**
   * Example usage of the new field {@link Kind#REMAINDER_ASSIGNMENT}.
   * @since 9
   * @see Kind#REMAINDER_ASSIGNMENT
   */
  public static final Kind REMAINDER_ASSIGNMENT = Kind.REMAINDER_ASSIGNMENT;

  /**
   * Example usage of the new field {@link Kind#PLUS_ASSIGNMENT}.
   * @since 9
   * @see Kind#PLUS_ASSIGNMENT
   */
  public static final Kind PLUS_ASSIGNMENT = Kind.PLUS_ASSIGNMENT;

  /**
   * Example usage of the new field {@link Kind#MINUS_ASSIGNMENT}.
   * @since 9
   * @see Kind#MINUS_ASSIGNMENT
   */
  public static final Kind MINUS_ASSIGNMENT = Kind.MINUS_ASSIGNMENT;

  /**
   * Example usage of the new field {@link Kind#LEFT_SHIFT_ASSIGNMENT}.
   * @since 9
   * @see Kind#LEFT_SHIFT_ASSIGNMENT
   */
  public static final Kind LEFT_SHIFT_ASSIGNMENT = Kind.LEFT_SHIFT_ASSIGNMENT;

  /**
   * Example usage of the new field {@link Kind#RIGHT_SHIFT_ASSIGNMENT}.
   * @since 9
   * @see Kind#RIGHT_SHIFT_ASSIGNMENT
   */
  public static final Kind RIGHT_SHIFT_ASSIGNMENT = Kind.RIGHT_SHIFT_ASSIGNMENT;

  /**
   * Example usage of the new field {@link Kind#UNSIGNED_RIGHT_SHIFT_ASSIGNMENT}.
   * @since 9
   * @see Kind#UNSIGNED_RIGHT_SHIFT_ASSIGNMENT
   */
  public static final Kind UNSIGNED_RIGHT_SHIFT_ASSIGNMENT = Kind.UNSIGNED_RIGHT_SHIFT_ASSIGNMENT;

  /**
   * Example usage of the new field {@link Kind#AND_ASSIGNMENT}.
   * @since 9
   * @see Kind#AND_ASSIGNMENT
   */
  public static final Kind AND_ASSIGNMENT = Kind.AND_ASSIGNMENT;

  /**
   * Example usage of the new field {@link Kind#XOR_ASSIGNMENT}.
   * @since 9
   * @see Kind#XOR_ASSIGNMENT
   */
  public static final Kind XOR_ASSIGNMENT = Kind.XOR_ASSIGNMENT;

  /**
   * Example usage of the new field {@link Kind#OR_ASSIGNMENT}.
   * @since 9
   * @see Kind#OR_ASSIGNMENT
   */
  public static final Kind OR_ASSIGNMENT = Kind.OR_ASSIGNMENT;

  /**
   * Example usage of the new field {@link Kind#SPREAD}.
   * @since 9
   * @see Kind#SPREAD
   */
  public static final Kind SPREAD = Kind.SPREAD;

  /**
   * Example usage of the new field {@link Kind#YIELD}.
   * @since 9
   * @see Kind#YIELD
   */
  public static final Kind YIELD = Kind.YIELD;

  /**
   * Example usage of the new field {@link Kind#NUMBER_LITERAL}.
   * @since 9
   * @see Kind#NUMBER_LITERAL
   */
  public static final Kind NUMBER_LITERAL = Kind.NUMBER_LITERAL;

  /**
   * Example usage of the new field {@link Kind#BOOLEAN_LITERAL}.
   * @since 9
   * @see Kind#BOOLEAN_LITERAL
   */
  public static final Kind BOOLEAN_LITERAL = Kind.BOOLEAN_LITERAL;

  /**
   * Example usage of the new field {@link Kind#STRING_LITERAL}.
   * @since 9
   * @see Kind#STRING_LITERAL
   */
  public static final Kind STRING_LITERAL = Kind.STRING_LITERAL;

  /**
   * Example usage of the new field {@link Kind#NULL_LITERAL}.
   * @since 9
   * @see Kind#NULL_LITERAL
   */
  public static final Kind NULL_LITERAL = Kind.NULL_LITERAL;

  /**
   * Example usage of the new field {@link Kind#OTHER}.
   * @since 9
   * @see Kind#OTHER
   */
  public static final Kind OTHER = Kind.OTHER;

  /**
   * Example call to new method {@link Kind#values()}.
   * @since 9
   * @see Kind#values()
   */
  public static Kind[] values()
  {
    Kind[] result = Kind.values();
    return result;
  }

  /**
   * Example call to new method {@link Kind#valueOf(String)}.
   * @since 9
   * @see Kind#valueOf(String)
   */
  public static Kind valueOf(String name)
  {
    Kind result = Kind.valueOf(name);
    return result;
  }

  /**
   * Example call to new method {@link Kind#asInterface()}.
   * @since 9
   * @see Kind#asInterface()
   */
  public Class<? extends Tree> asInterface()
  {
    Kind testee = $$$();

    Class<? extends Tree> result = testee.asInterface();
    return result;
  }

  /**
   * Example call to new method {@link Kind#isLiteral()}.
   * @since 9
   * @see Kind#isLiteral()
   */
  public boolean isLiteral()
  {
    Kind testee = $$$();

    boolean result = testee.isLiteral();
    return result;
  }

  /**
   * Example call to new method {@link Kind#isExpression()}.
   * @since 9
   * @see Kind#isExpression()
   */
  public boolean isExpression()
  {
    Kind testee = $$$();

    boolean result = testee.isExpression();
    return result;
  }

  /**
   * Example call to new method {@link Kind#isStatement()}.
   * @since 9
   * @see Kind#isStatement()
   */
  public boolean isStatement()
  {
    Kind testee = $$$();

    boolean result = testee.isStatement();
    return result;
  }

  private Kind $$$()
  {
    return null;
  }
}
