package whatisnewin.jdk.nashorn.api.tree;

import jdk.nashorn.api.tree.TreeVisitor;
import jdk.nashorn.api.tree.DebuggerTree;
import jdk.nashorn.api.tree.ClassExpressionTree;
import jdk.nashorn.api.tree.CompoundAssignmentTree;
import jdk.nashorn.api.tree.NewTree;
import jdk.nashorn.api.tree.ArrayLiteralTree;
import jdk.nashorn.api.tree.ImportEntryTree;
import jdk.nashorn.api.tree.BinaryTree;
import jdk.nashorn.api.tree.BreakTree;
import jdk.nashorn.api.tree.ContinueTree;
import jdk.nashorn.api.tree.LiteralTree;
import jdk.nashorn.api.tree.WithTree;
import jdk.nashorn.api.tree.ModuleTree;
import jdk.nashorn.api.tree.CompilationUnitTree;
import jdk.nashorn.api.tree.AssignmentTree;
import jdk.nashorn.api.tree.SwitchTree;
import jdk.nashorn.api.tree.PropertyTree;
import jdk.nashorn.api.tree.YieldTree;
import jdk.nashorn.api.tree.DoWhileLoopTree;
import jdk.nashorn.api.tree.RegExpLiteralTree;
import jdk.nashorn.api.tree.ErroneousTree;
import jdk.nashorn.api.tree.TemplateLiteralTree;
import jdk.nashorn.api.tree.TryTree;
import jdk.nashorn.api.tree.ThrowTree;
import jdk.nashorn.api.tree.CaseTree;
import jdk.nashorn.api.tree.VariableTree;
import jdk.nashorn.api.tree.IdentifierTree;
import jdk.nashorn.api.tree.IfTree;
import jdk.nashorn.api.tree.SpreadTree;
import jdk.nashorn.api.tree.WhileLoopTree;
import jdk.nashorn.api.tree.ParenthesizedTree;
import jdk.nashorn.api.tree.ConditionalExpressionTree;
import jdk.nashorn.api.tree.ClassDeclarationTree;
import jdk.nashorn.api.tree.ExportEntryTree;
import jdk.nashorn.api.tree.CatchTree;
import jdk.nashorn.api.tree.InstanceOfTree;
import jdk.nashorn.api.tree.ExpressionStatementTree;
import jdk.nashorn.api.tree.ForInLoopTree;
import jdk.nashorn.api.tree.EmptyStatementTree;
import jdk.nashorn.api.tree.Tree;
import jdk.nashorn.api.tree.FunctionCallTree;
import jdk.nashorn.api.tree.UnaryTree;
import jdk.nashorn.api.tree.ForOfLoopTree;
import jdk.nashorn.api.tree.ReturnTree;
import jdk.nashorn.api.tree.LabeledStatementTree;
import jdk.nashorn.api.tree.MemberSelectTree;
import jdk.nashorn.api.tree.BlockTree;
import jdk.nashorn.api.tree.ObjectLiteralTree;
import jdk.nashorn.api.tree.FunctionExpressionTree;
import jdk.nashorn.api.tree.ArrayAccessTree;
import jdk.nashorn.api.tree.FunctionDeclarationTree;
import jdk.nashorn.api.tree.ForLoopTree;

/**
 * This source file was generated by WhatIsNewInJava<br>
 *
 * This class provides an example call to each method in class {@link TreeVisitor}
 * that were newly introduced in Java versions 9, 10, 11.<br>
 *
 * {@link TreeVisitor} is a completely new class
 * @since 9
 * @see TreeVisitor
 */
public final class WhatIsNewInTreeVisitor<R, P>
{
  /**
   * Example call to new method {@link TreeVisitor#visitDebugger}
   * @since 9
   * @see TreeVisitor#visitDebugger
   */
  public R visitDebugger(DebuggerTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitDebugger(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitClassExpression}
   * @since 9
   * @see TreeVisitor#visitClassExpression
   */
  public R visitClassExpression(ClassExpressionTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitClassExpression(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitCompoundAssignment}
   * @since 9
   * @see TreeVisitor#visitCompoundAssignment
   */
  public R visitCompoundAssignment(CompoundAssignmentTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitCompoundAssignment(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitNew}
   * @since 9
   * @see TreeVisitor#visitNew
   */
  public R visitNew(NewTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitNew(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitArrayLiteral}
   * @since 9
   * @see TreeVisitor#visitArrayLiteral
   */
  public R visitArrayLiteral(ArrayLiteralTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitArrayLiteral(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitImportEntry}
   * @since 9
   * @see TreeVisitor#visitImportEntry
   */
  public R visitImportEntry(ImportEntryTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitImportEntry(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitBinary}
   * @since 9
   * @see TreeVisitor#visitBinary
   */
  public R visitBinary(BinaryTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitBinary(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitBreak}
   * @since 9
   * @see TreeVisitor#visitBreak
   */
  public R visitBreak(BreakTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitBreak(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitContinue}
   * @since 9
   * @see TreeVisitor#visitContinue
   */
  public R visitContinue(ContinueTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitContinue(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitLiteral}
   * @since 9
   * @see TreeVisitor#visitLiteral
   */
  public R visitLiteral(LiteralTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitLiteral(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitWith}
   * @since 9
   * @see TreeVisitor#visitWith
   */
  public R visitWith(WithTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitWith(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitModule}
   * @since 9
   * @see TreeVisitor#visitModule
   */
  public R visitModule(ModuleTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitModule(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitCompilationUnit}
   * @since 9
   * @see TreeVisitor#visitCompilationUnit
   */
  public R visitCompilationUnit(CompilationUnitTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitCompilationUnit(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitAssignment}
   * @since 9
   * @see TreeVisitor#visitAssignment
   */
  public R visitAssignment(AssignmentTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitAssignment(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitSwitch}
   * @since 9
   * @see TreeVisitor#visitSwitch
   */
  public R visitSwitch(SwitchTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitSwitch(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitProperty}
   * @since 9
   * @see TreeVisitor#visitProperty
   */
  public R visitProperty(PropertyTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitProperty(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitYield}
   * @since 9
   * @see TreeVisitor#visitYield
   */
  public R visitYield(YieldTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitYield(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitDoWhileLoop}
   * @since 9
   * @see TreeVisitor#visitDoWhileLoop
   */
  public R visitDoWhileLoop(DoWhileLoopTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitDoWhileLoop(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitRegExpLiteral}
   * @since 9
   * @see TreeVisitor#visitRegExpLiteral
   */
  public R visitRegExpLiteral(RegExpLiteralTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitRegExpLiteral(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitErroneous}
   * @since 9
   * @see TreeVisitor#visitErroneous
   */
  public R visitErroneous(ErroneousTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitErroneous(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitTemplateLiteral}
   * @since 9
   * @see TreeVisitor#visitTemplateLiteral
   */
  public R visitTemplateLiteral(TemplateLiteralTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitTemplateLiteral(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitTry}
   * @since 9
   * @see TreeVisitor#visitTry
   */
  public R visitTry(TryTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitTry(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitThrow}
   * @since 9
   * @see TreeVisitor#visitThrow
   */
  public R visitThrow(ThrowTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitThrow(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitCase}
   * @since 9
   * @see TreeVisitor#visitCase
   */
  public R visitCase(CaseTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitCase(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitVariable}
   * @since 9
   * @see TreeVisitor#visitVariable
   */
  public R visitVariable(VariableTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitVariable(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitIdentifier}
   * @since 9
   * @see TreeVisitor#visitIdentifier
   */
  public R visitIdentifier(IdentifierTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitIdentifier(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitIf}
   * @since 9
   * @see TreeVisitor#visitIf
   */
  public R visitIf(IfTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitIf(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitSpread}
   * @since 9
   * @see TreeVisitor#visitSpread
   */
  public R visitSpread(SpreadTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitSpread(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitWhileLoop}
   * @since 9
   * @see TreeVisitor#visitWhileLoop
   */
  public R visitWhileLoop(WhileLoopTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitWhileLoop(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitParenthesized}
   * @since 9
   * @see TreeVisitor#visitParenthesized
   */
  public R visitParenthesized(ParenthesizedTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitParenthesized(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitConditionalExpression}
   * @since 9
   * @see TreeVisitor#visitConditionalExpression
   */
  public R visitConditionalExpression(ConditionalExpressionTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitConditionalExpression(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitClassDeclaration}
   * @since 9
   * @see TreeVisitor#visitClassDeclaration
   */
  public R visitClassDeclaration(ClassDeclarationTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitClassDeclaration(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitExportEntry}
   * @since 9
   * @see TreeVisitor#visitExportEntry
   */
  public R visitExportEntry(ExportEntryTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitExportEntry(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitCatch}
   * @since 9
   * @see TreeVisitor#visitCatch
   */
  public R visitCatch(CatchTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitCatch(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitInstanceOf}
   * @since 9
   * @see TreeVisitor#visitInstanceOf
   */
  public R visitInstanceOf(InstanceOfTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitInstanceOf(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitExpressionStatement}
   * @since 9
   * @see TreeVisitor#visitExpressionStatement
   */
  public R visitExpressionStatement(ExpressionStatementTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitExpressionStatement(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitForInLoop}
   * @since 9
   * @see TreeVisitor#visitForInLoop
   */
  public R visitForInLoop(ForInLoopTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitForInLoop(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitEmptyStatement}
   * @since 9
   * @see TreeVisitor#visitEmptyStatement
   */
  public R visitEmptyStatement(EmptyStatementTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitEmptyStatement(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitUnknown}
   * @since 9
   * @see TreeVisitor#visitUnknown
   */
  public R visitUnknown(Tree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitUnknown(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitFunctionCall}
   * @since 9
   * @see TreeVisitor#visitFunctionCall
   */
  public R visitFunctionCall(FunctionCallTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitFunctionCall(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitUnary}
   * @since 9
   * @see TreeVisitor#visitUnary
   */
  public R visitUnary(UnaryTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitUnary(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitForOfLoop}
   * @since 9
   * @see TreeVisitor#visitForOfLoop
   */
  public R visitForOfLoop(ForOfLoopTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitForOfLoop(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitReturn}
   * @since 9
   * @see TreeVisitor#visitReturn
   */
  public R visitReturn(ReturnTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitReturn(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitLabeledStatement}
   * @since 9
   * @see TreeVisitor#visitLabeledStatement
   */
  public R visitLabeledStatement(LabeledStatementTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitLabeledStatement(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitMemberSelect}
   * @since 9
   * @see TreeVisitor#visitMemberSelect
   */
  public R visitMemberSelect(MemberSelectTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitMemberSelect(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitBlock}
   * @since 9
   * @see TreeVisitor#visitBlock
   */
  public R visitBlock(BlockTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitBlock(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitObjectLiteral}
   * @since 9
   * @see TreeVisitor#visitObjectLiteral
   */
  public R visitObjectLiteral(ObjectLiteralTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitObjectLiteral(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitFunctionExpression}
   * @since 9
   * @see TreeVisitor#visitFunctionExpression
   */
  public R visitFunctionExpression(FunctionExpressionTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitFunctionExpression(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitArrayAccess}
   * @since 9
   * @see TreeVisitor#visitArrayAccess
   */
  public R visitArrayAccess(ArrayAccessTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitArrayAccess(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitFunctionDeclaration}
   * @since 9
   * @see TreeVisitor#visitFunctionDeclaration
   */
  public R visitFunctionDeclaration(FunctionDeclarationTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitFunctionDeclaration(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitForLoop}
   * @since 9
   * @see TreeVisitor#visitForLoop
   */
  public R visitForLoop(ForLoopTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitForLoop(node, p);
    return result;
  }

  private TreeVisitor $$$()
  {
    return null;
  }
}
