package whatisnewin.jdk.nashorn.api.tree;

import jdk.nashorn.api.tree.TreeVisitor;
import jdk.nashorn.api.tree.AssignmentTree;
import jdk.nashorn.api.tree.CompoundAssignmentTree;
import jdk.nashorn.api.tree.BinaryTree;
import jdk.nashorn.api.tree.BlockTree;
import jdk.nashorn.api.tree.BreakTree;
import jdk.nashorn.api.tree.CaseTree;
import jdk.nashorn.api.tree.CatchTree;
import jdk.nashorn.api.tree.ClassDeclarationTree;
import jdk.nashorn.api.tree.ClassExpressionTree;
import jdk.nashorn.api.tree.ConditionalExpressionTree;
import jdk.nashorn.api.tree.ContinueTree;
import jdk.nashorn.api.tree.DebuggerTree;
import jdk.nashorn.api.tree.DoWhileLoopTree;
import jdk.nashorn.api.tree.ErroneousTree;
import jdk.nashorn.api.tree.ExpressionStatementTree;
import jdk.nashorn.api.tree.ForLoopTree;
import jdk.nashorn.api.tree.ForInLoopTree;
import jdk.nashorn.api.tree.ForOfLoopTree;
import jdk.nashorn.api.tree.FunctionCallTree;
import jdk.nashorn.api.tree.FunctionDeclarationTree;
import jdk.nashorn.api.tree.FunctionExpressionTree;
import jdk.nashorn.api.tree.IdentifierTree;
import jdk.nashorn.api.tree.IfTree;
import jdk.nashorn.api.tree.ArrayAccessTree;
import jdk.nashorn.api.tree.ArrayLiteralTree;
import jdk.nashorn.api.tree.LabeledStatementTree;
import jdk.nashorn.api.tree.LiteralTree;
import jdk.nashorn.api.tree.ParenthesizedTree;
import jdk.nashorn.api.tree.ReturnTree;
import jdk.nashorn.api.tree.MemberSelectTree;
import jdk.nashorn.api.tree.NewTree;
import jdk.nashorn.api.tree.ObjectLiteralTree;
import jdk.nashorn.api.tree.PropertyTree;
import jdk.nashorn.api.tree.RegExpLiteralTree;
import jdk.nashorn.api.tree.TemplateLiteralTree;
import jdk.nashorn.api.tree.EmptyStatementTree;
import jdk.nashorn.api.tree.SpreadTree;
import jdk.nashorn.api.tree.SwitchTree;
import jdk.nashorn.api.tree.ThrowTree;
import jdk.nashorn.api.tree.CompilationUnitTree;
import jdk.nashorn.api.tree.ModuleTree;
import jdk.nashorn.api.tree.ExportEntryTree;
import jdk.nashorn.api.tree.ImportEntryTree;
import jdk.nashorn.api.tree.TryTree;
import jdk.nashorn.api.tree.InstanceOfTree;
import jdk.nashorn.api.tree.UnaryTree;
import jdk.nashorn.api.tree.VariableTree;
import jdk.nashorn.api.tree.WhileLoopTree;
import jdk.nashorn.api.tree.WithTree;
import jdk.nashorn.api.tree.YieldTree;
import jdk.nashorn.api.tree.Tree;

/**
 * This source file was generated by WhatIsNewInJava.<br>
 *
 * This class provides an example call to each method in class {@link TreeVisitor}
 * that were newly introduced in Java versions 9, 10, 11.<br>
 *
 * {@link TreeVisitor} is a completely new class.
 * @since 9
 * @see TreeVisitor
 */
public final class WhatIsNewInTreeVisitor<R, P>
{
  /**
   * Example call to new method {@link TreeVisitor#visitAssignment(AssignmentTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitAssignment(AssignmentTree, Object)
   */
  public R visitAssignment(AssignmentTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitAssignment(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitCompoundAssignment(CompoundAssignmentTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitCompoundAssignment(CompoundAssignmentTree, Object)
   */
  public R visitCompoundAssignment(CompoundAssignmentTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitCompoundAssignment(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitBinary(BinaryTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitBinary(BinaryTree, Object)
   */
  public R visitBinary(BinaryTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitBinary(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitBlock(BlockTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitBlock(BlockTree, Object)
   */
  public R visitBlock(BlockTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitBlock(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitBreak(BreakTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitBreak(BreakTree, Object)
   */
  public R visitBreak(BreakTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitBreak(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitCase(CaseTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitCase(CaseTree, Object)
   */
  public R visitCase(CaseTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitCase(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitCatch(CatchTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitCatch(CatchTree, Object)
   */
  public R visitCatch(CatchTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitCatch(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitClassDeclaration(ClassDeclarationTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitClassDeclaration(ClassDeclarationTree, Object)
   */
  public R visitClassDeclaration(ClassDeclarationTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitClassDeclaration(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitClassExpression(ClassExpressionTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitClassExpression(ClassExpressionTree, Object)
   */
  public R visitClassExpression(ClassExpressionTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitClassExpression(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitConditionalExpression(ConditionalExpressionTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitConditionalExpression(ConditionalExpressionTree, Object)
   */
  public R visitConditionalExpression(ConditionalExpressionTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitConditionalExpression(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitContinue(ContinueTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitContinue(ContinueTree, Object)
   */
  public R visitContinue(ContinueTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitContinue(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitDebugger(DebuggerTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitDebugger(DebuggerTree, Object)
   */
  public R visitDebugger(DebuggerTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitDebugger(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitDoWhileLoop(DoWhileLoopTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitDoWhileLoop(DoWhileLoopTree, Object)
   */
  public R visitDoWhileLoop(DoWhileLoopTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitDoWhileLoop(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitErroneous(ErroneousTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitErroneous(ErroneousTree, Object)
   */
  public R visitErroneous(ErroneousTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitErroneous(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitExpressionStatement(ExpressionStatementTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitExpressionStatement(ExpressionStatementTree, Object)
   */
  public R visitExpressionStatement(ExpressionStatementTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitExpressionStatement(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitForLoop(ForLoopTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitForLoop(ForLoopTree, Object)
   */
  public R visitForLoop(ForLoopTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitForLoop(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitForInLoop(ForInLoopTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitForInLoop(ForInLoopTree, Object)
   */
  public R visitForInLoop(ForInLoopTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitForInLoop(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitForOfLoop(ForOfLoopTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitForOfLoop(ForOfLoopTree, Object)
   */
  public R visitForOfLoop(ForOfLoopTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitForOfLoop(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitFunctionCall(FunctionCallTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitFunctionCall(FunctionCallTree, Object)
   */
  public R visitFunctionCall(FunctionCallTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitFunctionCall(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitFunctionDeclaration(FunctionDeclarationTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitFunctionDeclaration(FunctionDeclarationTree, Object)
   */
  public R visitFunctionDeclaration(FunctionDeclarationTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitFunctionDeclaration(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitFunctionExpression(FunctionExpressionTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitFunctionExpression(FunctionExpressionTree, Object)
   */
  public R visitFunctionExpression(FunctionExpressionTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitFunctionExpression(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitIdentifier(IdentifierTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitIdentifier(IdentifierTree, Object)
   */
  public R visitIdentifier(IdentifierTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitIdentifier(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitIf(IfTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitIf(IfTree, Object)
   */
  public R visitIf(IfTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitIf(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitArrayAccess(ArrayAccessTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitArrayAccess(ArrayAccessTree, Object)
   */
  public R visitArrayAccess(ArrayAccessTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitArrayAccess(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitArrayLiteral(ArrayLiteralTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitArrayLiteral(ArrayLiteralTree, Object)
   */
  public R visitArrayLiteral(ArrayLiteralTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitArrayLiteral(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitLabeledStatement(LabeledStatementTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitLabeledStatement(LabeledStatementTree, Object)
   */
  public R visitLabeledStatement(LabeledStatementTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitLabeledStatement(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitLiteral(LiteralTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitLiteral(LiteralTree, Object)
   */
  public R visitLiteral(LiteralTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitLiteral(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitParenthesized(ParenthesizedTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitParenthesized(ParenthesizedTree, Object)
   */
  public R visitParenthesized(ParenthesizedTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitParenthesized(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitReturn(ReturnTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitReturn(ReturnTree, Object)
   */
  public R visitReturn(ReturnTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitReturn(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitMemberSelect(MemberSelectTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitMemberSelect(MemberSelectTree, Object)
   */
  public R visitMemberSelect(MemberSelectTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitMemberSelect(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitNew(NewTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitNew(NewTree, Object)
   */
  public R visitNew(NewTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitNew(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitObjectLiteral(ObjectLiteralTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitObjectLiteral(ObjectLiteralTree, Object)
   */
  public R visitObjectLiteral(ObjectLiteralTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitObjectLiteral(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitProperty(PropertyTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitProperty(PropertyTree, Object)
   */
  public R visitProperty(PropertyTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitProperty(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitRegExpLiteral(RegExpLiteralTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitRegExpLiteral(RegExpLiteralTree, Object)
   */
  public R visitRegExpLiteral(RegExpLiteralTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitRegExpLiteral(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitTemplateLiteral(TemplateLiteralTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitTemplateLiteral(TemplateLiteralTree, Object)
   */
  public R visitTemplateLiteral(TemplateLiteralTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitTemplateLiteral(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitEmptyStatement(EmptyStatementTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitEmptyStatement(EmptyStatementTree, Object)
   */
  public R visitEmptyStatement(EmptyStatementTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitEmptyStatement(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitSpread(SpreadTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitSpread(SpreadTree, Object)
   */
  public R visitSpread(SpreadTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitSpread(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitSwitch(SwitchTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitSwitch(SwitchTree, Object)
   */
  public R visitSwitch(SwitchTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitSwitch(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitThrow(ThrowTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitThrow(ThrowTree, Object)
   */
  public R visitThrow(ThrowTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitThrow(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitCompilationUnit(CompilationUnitTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitCompilationUnit(CompilationUnitTree, Object)
   */
  public R visitCompilationUnit(CompilationUnitTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitCompilationUnit(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitModule(ModuleTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitModule(ModuleTree, Object)
   */
  public R visitModule(ModuleTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitModule(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitExportEntry(ExportEntryTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitExportEntry(ExportEntryTree, Object)
   */
  public R visitExportEntry(ExportEntryTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitExportEntry(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitImportEntry(ImportEntryTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitImportEntry(ImportEntryTree, Object)
   */
  public R visitImportEntry(ImportEntryTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitImportEntry(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitTry(TryTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitTry(TryTree, Object)
   */
  public R visitTry(TryTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitTry(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitInstanceOf(InstanceOfTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitInstanceOf(InstanceOfTree, Object)
   */
  public R visitInstanceOf(InstanceOfTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitInstanceOf(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitUnary(UnaryTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitUnary(UnaryTree, Object)
   */
  public R visitUnary(UnaryTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitUnary(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitVariable(VariableTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitVariable(VariableTree, Object)
   */
  public R visitVariable(VariableTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitVariable(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitWhileLoop(WhileLoopTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitWhileLoop(WhileLoopTree, Object)
   */
  public R visitWhileLoop(WhileLoopTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitWhileLoop(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitWith(WithTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitWith(WithTree, Object)
   */
  public R visitWith(WithTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitWith(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitYield(YieldTree, Object)}.
   * @since 9
   * @see TreeVisitor#visitYield(YieldTree, Object)
   */
  public R visitYield(YieldTree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitYield(node, p);
    return result;
  }

  /**
   * Example call to new method {@link TreeVisitor#visitUnknown(Tree, Object)}.
   * @since 9
   * @see TreeVisitor#visitUnknown(Tree, Object)
   */
  public R visitUnknown(Tree node, P p)
  {
    TreeVisitor<R, P> testee = $$$();

    R result = testee.visitUnknown(node, p);
    return result;
  }

  private TreeVisitor $$$()
  {
    return null;
  }
}
